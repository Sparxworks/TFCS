option explicit

'const TFCSBASEDIR = "T:/Projecten/Project CDD/Beheer werkdocumenten/Systeemdocumentatie/100 EA Repository/TFCS/Configuratie"
const TFCSBASEDIR = "d:/TFCS/src"

' DBMS specific settings (used in TFCS_SQL and TFCS_VALSQL)
Dim xWCx 		' wildcard, include : 
dim xUCASEx 	' convert text to uppercase, include as: ..."+xUCASEx+"(...)"

' Change according to the DBMS used
' .EAP (MSAccess)
xWCx = "*"	
xUCASEx = "ucase"		
' Oracle
'xWCx = "%"			
'xUCASEx = "upper"

'----------------------------------------------------------------------------------------------------------------------
' Module containing all SQL statements used.
' SQL is grouped on referencing module and prefixed with part of the name of that module to prevent name clashes
'----------------------------------------------------------------------------------------------------------------------

'!INC TFCS_Core.TFCS_Constants

' =============================================================================
' TFCS_ModelValidation
' =============================================================================
' Since there are quite a few: left in (the head of) the script file

' =============================================================================
' TFCS_DragDropHandler
' =============================================================================
dim SQL_GET_DIAGRAMOBJECT_RECT : SQL_GET_DIAGRAMOBJECT_RECT = _
	"select rectleft,recttop,rectright,rectbottom from t_diagramobjects where diagram_id = {0} and object_id = {1}"

' =============================================================================
' TFCS_DeleteHandler
' =============================================================================
const DELH_SQL_DGMOBJS = "select count(*) as RESULT from t_diagramobjects where object_id = {0}"

' =============================================================================
' TFCS_DocumentGeneration
' =============================================================================

' Returns all diagrams behind composite steps
Dim DOCGEN_SQL_DGM_COMPLEXSTEPS: DOCGEN_SQL_DGM_COMPLEXSTEPS = _
" select d.diagram_id, d.ea_guid,o.name " &_
" from t_diagram p, t_diagramobjects do" &_
"	 ,t_object o" &_
"	 ,t_object c" &_
"	 ,t_diagram d" &_
" where p.ea_guid = '{0}' and p.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.classifier = c.object_id" &_
"	 and o.stereotype = 'TFCS_CompositeAction'" &_
"	 and d.parentid = c.object_id"

' Returns all diagrams that contain a specific object (element)
Dim DOCGEN_SQL_DIAGRAMSWITHELT: DOCGEN_SQL_DIAGRAMSWITHELT = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.ea_guid = '{0}' order by d.name"

' Returns all diagrams that contain a specific object (element) -as classifier-
dim DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER: DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o, t_object c" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id and o.classifier = c.object_id" &_
"	 and c.ea_guid = '{0}' order by  d.name"

' Returns all elements (either notes or plain text) that are contained in boundary with name 'Toelichting'
Dim DOCGEN_SQL_DGM_REMARKSFORDGM: DOCGEN_SQL_DGM_REMARKSFORDGM = _
" select tlo.object_id " &_
" from t_diagram d" &_
"		,t_diagramobjects do" &_
"		,t_object o" &_
"		,t_diagramobjects tl" &_
"		,t_object tlo" &_
" where  tlo.object_id = tl.Object_ID" &_
"		and tl.diagram_id = d.diagram_id" &_
"		and o.object_id = do.object_id" &_
"		and do.diagram_id = d.diagram_id" &_
"		and "+xUCASEx+"(o.Name) = 'TOELICHTING' and o.object_type = 'Boundary'" &_
"		and tlo.object_type in ('Note','Text')" &_
"		and tl.RectTop <= do.RectTop " &_
"		and tl.RectLeft >= do.RectLeft" &_
"		and tl.RectRight <= do.RectRight" &_
"		and tl.RectBottom >= do.RectBottom" &_
"		and d.ea_guid = '{0}'"

' =============================================================================
' TFCS_Commons
' =============================================================================
dim SQL_GET_OBJECTPROPERTIES: SQL_GET_OBJECTPROPERTIES= _
	"select XRefID,description as RESULT from t_xref where description like '@PROP"+xWCx+"' and client='{0}'"
const SQL_UPD_OBJECTPROPERTIES = "update t_xref set description = '{1}' where XRefID = '{0}'"
dim SQL_INS_OBJECTPROPERTIES: SQL_INS_OBJECTPROPERTIES = "insert into t_xref "&_
		" (XRefID,name,type,visibility,partition,description,client,supplier)" &_
		" values ('{0}','CustomProperties', 'element property', 'Public', 0, " &_
		" '@PROP=@NAME={2}@ENDNAME;@TYPE={3}@ENDTYPE;@VALU={4}@ENDVALU;@PRMT={5}@ENDPRMT;@ENDPROP;', "&_
		" '{1}','<none>')"
		
dim COMM_SQL_DGMSBYSTEREO : COMM_SQL_DGMSBYSTEREO = _
  " select IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name) "+"as"+" model " _
+ " , d.name " _
+ " , d.ea_guid " _
+ " from ((((((t_diagram d  ) " _
+ " inner join t_package pck0 on d.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where d.StyleEx like '"+xWCx+"MDGDgm=TFCS::{0}"+xWCx+"' " _
+ " order by IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name), d.name"
dim COMM_SQL_ELTSBYSTEREO_AND_TAG : COMM_SQL_ELTSBYSTEREO_AND_TAG = _
  " select IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name) "+"as model " _
+ " , tv.value " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o inner join t_objectproperties tv on tv.object_id = o.object_id  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"(o.Stereotype) = "+xUCASEx+"('{0}') " _
+ " 	and "+xUCASEx+"(tv.property) = "+xUCASEx+"('{1}') and "+xUCASEx+"('{2}') like '"+xWCx+"'+"+xUCASEx+"(tv.value)+'"+xWCx+"'" _
+ " order by IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name), tv.value, o.name"
dim COMM_SQL_ELTSBYSTEREO : COMM_SQL_ELTSBYSTEREO = _
  " select IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name) "+"as"+" model " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"('{0}') like '"+xWCx+"'+"+xUCASEx+"(o.Stereotype)+'"+xWCx+"' and o.object_id <> {1}" _
+ " order by IIF(ISNULL(pck4.name),IIF(ISNULL(pck3.name),IIF(ISNULL(pck2.name)," _
+ "IIF(ISNULL(pck1.name),pck0.name,pck1.name) ,pck2.name) ,pck3.name),pck4.name), o.name"
dim COMM_SQL_GETMODELS : COMM_SQL_GETMODELS = "select name from t_package where parent_id = 0 and name <> 'TFCS' order by name"

'----------------------------------------------------------------------------------------------------------------------
' Module containing general utility methods.
' 
' This module contains no event handlers only supporting functions, so registration with EAST is indirect, through
' inclusion within other modules
'
'----------------------------------------------------------------------------------------------------------------------

' Retrieves the named element from the user temp package (userdir.temp)
' If the user temp package does not yet exist, its created.
' If the temp element does not yet exist, its created (always type 'Class') including the note as explanation.
function GetTempElement(name,notes)
	dim pck: set pck = EAST.GetPackageByFQN(GEN__WORKSPACE+"."+EAST.UserName()+".temp",true)
	on error resume next
	dim elt: set elt = pck.Elements.GetByName(name)
	if elt is nothing then
		set elt = pck.Elements.AddNew("","Class")
		elt.name = name
		elt.Notes = notes
		elt.Update()
	end if
	set GetTempElement = elt
end function

' If the element is orphaned, delete it else leave it as it is
function DeleteIfOrphanedElement(elt)
	DeleteIfOrphanedElement = false ' meaning: continue with other handlers
	
	select case elt.Stereotype
		case "TFCS_Action"
		case "TFCS_AtomicAction"
		case "TFCS_CompositeAction"
		case "TFCS_ActivityInitial"
		case "TFCS_ActivityFinal"
		case "TFCS_Decision"
		case "TFCS_MergeNode"
		case "TFCS_Event"
		case "TFCS_DomainInstance"
		case "TFCS_IntermediateResult"
		case "TFCS_AuthorisationEffect"
		case else
			exit function
	end select

	' owned element, but it's still possible it was dropped on another diagram as well
	dim result: result = EAST.ExecuteScalarSQL(DELH_SQL_DGMOBJS,Cstr(elt.ElementID))
	if (not TypeName(result) = "Empty") and CInt(result) <= 1  then
		' Element exclusively used by this diagram => delete it
		EAST.LogInfo("DeleteIfOrphanedElement: element no longer used so deleting that as well")
		DeleteElementFromModel(elt)
		DeleteIfOrphanedElement = true
	end if

end function

' Remove an element from the model
sub DeleteElementFromModel(elt)		
	dim elements, i
	if elt.ParentID = 0 then
		set elements = GetPackageByID(elt.PackageID).elements
	else 
		set elements = GetElementByID(elt.ParentID).elements
	end if

	for i = 0 to elements.Count - 1
		if elements.GetAt(i).ElementID = elt.ElementID then
			elements.DeleteAt i, false
			Elements.Refresh()
			EAST.LogInfo("DeleteElementFromModel: deleted "&elt.ElementID)
			exit sub
		end if
	next
end sub

function GetPrivatePackage(model,name)
	set GetPrivatePackage = nothing
	
 	' Get the private workspace for the current user
	dim workspacePath: workspacePath = GEN__WORKSPACE+"."+EAST.UserName()
	Dim workspace : 
	on error resume next
	set workspace = EAST.GetPackageByFQN(workspacePath) 
	if err.number <> 0 then
		EAST.MsgBox EAST.StrRep(MSG_WORKSPACE_MISSING,workspacePath),16,COMM_NEW_WORKFLOW
		exit function
	end if
	on error goto 0

	' Get the package (create if not available)
	if(name <> "") then
		name = "."+name
	end if
	if model = GEN__WORKSPACE then
		' No model selected: drop in private workspace root
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+name, true)
	else
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+"."+model+name, true) 
	end if

end function

' Add an action for the supplied workflow activity to the diagram at the indicated position
' Returns the action element that was created

'-----------------------------------------------------------------------------------
' Generic diagram & element 
'-----------------------------------------------------------------------------------

' Tree selection dialog - all elements in repository, current model is default open Returns GUID of selected dgm
function SelectDiagramFromTree(title,stereotype,stereotypeName,modelDefault,allowNew)
	SelectDiagramFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_DGMSBYSTEREO,ucase(stereotype))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectDiagramFromTree: "+dict.item("RESULT"))
	SelectDiagramFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository, current model is default open. Returns GUID of selected elt
function SelectElementFromTree(title,stereotype,stereotypeName,modelDefault,allowNew,hideElement)
	SelectElementFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim hideID: hideID = 0
	if not hideElement is nothing then
		hideID = hideElement.ElementID
	end if
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO,stereotype&"|"&hideID)	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementFromTree: "+dict.item("RESULT"))
	SelectElementFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository with specific tag values, default tag open .Returns GUID of selected elt
function SelectElementTagFromTree(title,stereotype,tagName,tagValues,modelDefault,tagDefault,allowNew)
	SelectElementTagFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO_AND_TAG,stereotype+"|"+tagName+"|"+ucase(tagValues))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	dict.add "DFLT_TAG",tagDefault
	if allowNew then
		dict.add "ALLOWNEW",tagValues
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementTagFromTree: "+dict.item("RESULT"))
	SelectElementTagFromTree = dict.item("RESULT")
end function


' Returns true if an object is present on a specific diagram
function ObjectIsOnDiagram(objID,dgm)
	ObjectIsOnDiagram = false
	Dim dgmObject : 
	for each dgmObject in dgm.DiagramObjects
		if dgmObject.ElementID = objID then
			ObjectIsOnDiagram = true
			exit function
		end if
	next
end function

' Add an element as link to the diagram, return the created diagram object
function addEltToDiagram(elt, dgm, left, top)
	EAST.LogStart("addEltToDiagram")
	dim width: width = 20
	dim height: height = 30
	' TBD: Why is _sizeX/Y not working?
	select case elt.Type
	case "Issue"
		width = 200
	case "Requirement"
		width = 200
	case "Object"
		width = 150
		height = 50
	case "Class"
		width = 200
		height = 100
	case "Decision"
		width = 26
		height = 34
	case "MergeNode"
		width = 26
		height = 34
	case "Actor"
		width = 40
		height = 60
	case "UseCase"
		width = 100
		height = 70
	case "Activity"
		width = 80
		height = 60
	case "Action"
		width = 100
		if(elt.Stereotype = "TFCS_CompositeAction") then
			height = 60
		else
			height = 30
		end if
	case else
	end select
	dim right: right = left + width
	dim bottom: bottom = top + height
	dim dgmObject: set dgmObject = dgm.diagramObjects.AddNew("l="&left&";r="&right&";t="&top&";b="&bottom&";", "" )
	dgm.DiagramObjects.Refresh()
	dgmObject.ElementID = elt.ElementID 
	dgmObject.Update()

	set addEltToDiagram = dgmObject
	EAST.LogInfo("Added element to '"&dgm.name&"' at ("&left&","&top&")-("&right&","&bottom&")")
	EAST.LogEnd("addEltToDiagram")
end function

' Adds a post-it to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
function addPostIt(elt,dgm,loc,notes)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Note")
	dgmElement.Notes = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "BCol=65535;NSL=0"
	dgmObject.Update()
	
	set addPostIt = dgmObject
end function

' Adds a boundary to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
' nonSelectable: 1: niet selecteerbaar, 0: wel
function addBoundary(elt,dgm,loc,notes,nonSelectable)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Boundary")
	dgmElement.Name = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "font=Arial;fontsz=100;bold=1;italic=0;ul=0;charset=0;pitch=34;NSL="&nonSelectable
	dgmObject.Update()
	
	set addBoundary = dgmObject
end function

Function GetStyleEx(byref dgm, srch)
	GetStyleEx = ""
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos > 0 Then
        Dim ePos: ePos = InStr(sPos, style, ";")
        GetStyleEx = Mid(style, sPos+len(srch)+1, ePos-sPos-len(srch)-1)
    End If
End Function

sub SetStyleEx(byref dgm, srch, value)
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos = 0 Then
		style = style+srch+"="+value+";"
	else
	    Dim ePos: ePos = InStr(sPos, style, ";")
		style = Left(style,sPos+len(srch)+1)+value+Mid(style, ePos)
	end if
	dgm.StyleEx = style
	dgm.update()
End sub

Function GetTagByName(tags, name)

	Dim i
	Dim tag : 
	Set tag = Nothing
	If Not tags Is Nothing Then
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				Set tag = tags.GetAt(i)
				Exit For
			End If
		Next
	End If
	Set GetTagByName = tag

End Function

Function GetTagValByName(tags, name)

	Dim ret
	ret = ""

	If Not tags Is Nothing Then
		Dim i
		Dim tag : 
'		Set tag = tags.GetByName(name)
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				ret = tags.GetAt(i).Value
				Exit For
			End If
		Next
	End If

	GetTagValByName = ret

End Function


Sub SetTagValByName(tags, name, val, notes)

	If Not tags Is Nothing And Len(name) > 0 Then
		Dim tag : 
'		Set tag = tags.GetByName(name)
		Set tag = GetTagByName(tags, name)
		If Not tag Is Nothing Then
			tag.Value = val
			tag.Notes = notes
			tag.Update
			tags.Refresh
		Else
			Set tag = tags.AddNew(name, val)
			tag.notes = notes
			tag.Update
			tags.Refresh
		End If
	End If

End Sub

function GetElementByName(eltList,name)
	set GetElementByName = nothing
	
	dim elt
	for each elt in eltList
		if elt.name = name then 
			set GetElementByName = elt
			exit function
		end if
	next
end function

' Adds a property to an element
' Carefull: no check if the property already exists!
sub AddProperty(eltGUID,pName,pType,pValue,pComment)
	dim props: set props = EAST.ExecuteSQL(SQL_GET_OBJECTPROPERTIES,eltGUID)
	if props is nothing or props.count = 0  then
EAST.LogError("Nothing founjd "&props.count)
		' create the very first property in the set
		Repository.Execute(EAST.StrRep(SQL_INS_OBJECTPROPERTIES, _
			EAST.GenerateGUID()+"|"+eltGUID+"|"+pName+"|"+pType+"|"+pValue+"|"+pComment ))
	else
		dim ID : ID = props.item(0).item("XREFID")
		dim DESC : DESC = props.item(0).item("DESCRIPTION")
		DESC = DESC + EAST.StrRep("@PROP=@NAME={0}@ENDNAME;@TYPE={1}@ENDTYPE;@VALU={2}@ENDVALU;@PRMT={3}@ENDPRMT;@ENDPROP;", _
			pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(EAST.StrRep(SQL_UPD_OBJECTPROPERTIES, ID+"|"+DESC)) 
	end if
end sub

'option explicit

''!INC TFCS_Support.TFCS_SQL
''!INC TFCS_Support.TFCS_commons
'
'const sql = "Select * from t_diagram"
'const sql_args1 = "Select * from t_diagram where name like '{0}'"
'const sql_args2 = "Select * from t_diagram where name like '{0}' and author = '{1}'"

'-----------------------------------------------------------------------------------
' Generic diagram & element 
'-----------------------------------------------------------------------------------


sub EAST_RunUnitTests
	Dim stereo : 
	for each stereo in Stereotypes
		EAST.LogError(">>>>>>>>>>>>> "+stereo.Name)
		EAST.LogWarning(stereo.ObjectType)
		EAST.LogWarning(stereo.MetafileLoadPath)
		EAST.LogWarning(stereo.Style)
		EAST.LogWarning(stereo.VisualType)
		EAST.LogWarning(stereo.AppliesTo)
	next
end sub

sub OpenIE
	Dim objIE: set objIE =CreateObject("InternetExplorer.Application")
    objIE.Visible = 1
    objIE.Height = 1024
    objIE.Width = 1600
    objIE.Navigate "file:///e:/TFCS/beheer/dialogs/TFCS - Create actor.htm"
end sub



sub AddToelichting()

	dim SQL: SQL = " select do.rectTop,do.rectleft,do.rectright,do.rectbottom,p.object_id" + _
	" from t_object o, t_diagramobjects do,t_diagram d, t_object p" + _
	" where ucase(o.note) like '*BASIC PATH*'   and o.object_id = do.object_id" + _
	" and do.diagram_id = d.diagram_id and d.parentid = p.object_id and p.Stereotype = 'TFCS_Workflow' and d.name like 'UCR-*'" 

	dim dict: set dict = EAST.ExecuteSQL(SQL,empty)
	if not dict is nothing then
		EAST.logError("Count: "&dict.count)
		dim row
		Dim uc : 
		for each row in dict.items
			set uc = GetElementByID(row.item("OBJECT_ID"))
EAST.LogError(uc.name)
			Dim ucReal : 
			set ucReal = uc.CompositeDiagram
			dim styleEx: styleEx = ucReal.StyleEx
			if InStr(styleEx,"ShowDiagramInPages") = 0 then
				ucReal.StyleEx = styleEx + "ShowDiagramInPages=1;"
				ucReal.update()
			end if
			' Add toelichting boundary
			dim dgmLabel : set dgmLabel = uc.Elements.AddNew("","Boundary")
			dgmLabel.Name = "Toelichting"
			dgmLabel.Update()
			dim top: top = -Cint(row.item("RECTTOP"))-5
			dim left: left = 1
			dim right: right = Cint(row.item("RECTRIGHT"))+5
			dim bottom: bottom = -Cint(row.item("RECTBOTTOM"))+5
			dim dgmObject : set dgmObject = ucReal.diagramObjects.AddNew( "l="&left&";t="&top&";r="&right&";b="&bottom&";", "" )
			dgmObject.ElementID( dgmLabel.ElementID )
			dgmObject.Update()
		next
	end if
end sub

sub DressUpWFRs()
	dim dict: set dict = EAST.ExecuteSQL("select object_id from t_object o  where o.Stereotype = 'TFCS_Workflow' ",empty)
	if not dict is nothing then
		EAST.logError("Count: "&dict.count)
		dim row
		Dim uc : 
		for each row in dict.items
			set uc = GetElementByID(row.item("OBJECT_ID"))
			if(uc.name <> "UC-0250 - Beheren feestdagen") then
			EAST.LogError(uc.name)
				dim ucReal : set ucReal = uc.CompositeDiagram
				' Diagram notes
				dim dgmLabel : set dgmLabel = uc.Elements.AddNew("","Text")
				dgmLabel.Subtype = 18
				dgmLabel.Update()
				dim dgmObject : set dgmObject = ucReal.diagramObjects.AddNew( "l=5;t=5;r=10;b=10;", "" )
				dgmObject.ElementID( dgmLabel.ElementID )
				dgmObject.Style = "NSL=1"
				dgmObject.Update()
				
				set dgmObject = ucReal.diagramObjects.AddNew( "l=559;t=27;r=701;b=85;", "" )
				dgmObject.ElementID( uc.ParentID )
				dgmObject.Style = "NSL=1"
				dgmObject.Update()
			end if
		next
	end if
end sub

sub UnitTest
	dim dlgGUID: dlgGUID = SelectDiagramFromTree("Selecteer een diagram","TFCS_FlowDiagram","Flow realisatie diagram","Onderhanden",false)
	dim dict: set dict = EAST.ExecuteSQL(RTFGEN_SQL_DGM_REMARKSFORDGM,dlgGUID)
	if not dict is nothing then
		EAST.logError("Count: "&dict.count)
		dim row
		for each row in dict.items
			EAST.LogError(row.item("REMARK"))
		next
	end if
	
' SelectElementTagFromTree "Let's try this!","TFCS_Workflow","WorkflowType","BedrijfsProces,WerkInstructie,UseCase","TFCS","UseCase",True
'	'' Run tests
'	Dim dict, res
'	EAST.LogClear()
'
'	' Run each method in sequence
'	dim now: now = timer()
'	EAST.LogInfo("Seconds passed since 12:00 AM: "&now)
'	EAST.sleep(3000)
'	dim andNow: andNow = timer()
'	EAST.LogInfo("This was a wait of "&(andNow-now)&" seconds")
'	EAST.Assert (Int(andnow-now) = 3),"Assert.Sleep should have waited 3 seconds but instead "&Int(andnow-now)
'
'	' Execute query without args
'	set dict = EAST.ExecuteSQL(sql,"")
'	if dict.count < 5 then
'		EAST.MsgBox "This test requires that at least 5 diagrams are present in your model",_
'			vbCritical,"Unable to continue unittest!"
'			exit sub
'	end if
'	
'	' Multiselect listbox dialog 
'	' Returning several rows
'	set dict = EAST.ExecuteSQL(sql,"")
'	dict.add "multiselect",1
'	'dict.add "preselect","2 4 5"
'	'dict.add "timer",1000
'	res = EAST.OpenDialog("tfcsSelectRows.html","Please select rows 2,4 and 5 and press OK",dict)
'	EAST.Assert (not dict.Exists("ERROR")),"Query failed"
''	session.output(dict.item("RESULT"))
'	dim args: args = Split(dict.item("RESULT"),"|")
'	EAST.LogInfo("User selected "&dict.item("RESULT"))
'	EAST.LogInfo("User selected "&UBound(args)+1&" rows")
'	EAST.Assert UBound(args)=2,"Not 3 rows selected"
'	EAST.Assert args(0)="2","First row should have been 2 and not "&args(0)
'	EAST.Assert args(1)="4","Second row should have been 4 and not "&args(1)
'	EAST.Assert args(2)="5","Third row should have been 5 and not "&args(2)
'	EAST.sleep(1000)
'	
'	dim dict : set dict = CreateObject("Scripting.Dictionary")			
'	dict.add 0,"Use case"
'	dict.add 1,"Werkinstructie"
'	dict.add 2,"BedrijfsProces"
'	selected = EAST.OpenDialog("tfcsSelectRadio.html","Selecteer het type workflow",dict)
'	selected = dict.item("RESULT")
'
'	' Uitvoeren van een query met EEN argument en enkelvoludig selectie dialoog
'	set dict = EAST.ExecuteSQL(sql_args1,"UC*") ' LET OP SQL voor Oracle is de wildcard niet * maar %
'	dict.add "multiselect",0
'	res = EAST.OpenDialog("e:/edda/dialogs/tfcsSelectRows.html","Selecteer een item",dict)
'	EAST.sleep(1000)
'	session.output(dict.item("RESULT"))
'	
'	' Uitvoeren van een query met TWEE argumenten en enkelvoludig selectie dialoog
'	set dict = EAST.ExecuteSQL(sql_args2,"UC*|maessenp") ' LET OP SQL voor Oracle is de wildcard niet * maar %
'	dict.add "multiselect",0
'	res = EAST.OpenDialog("e:/edda/dialogs/tfcsSelectRows.html","Selecteer een item",dict)
'	EAST.sleep(1000)
'	session.output(dict.item("RESULT"))
	
end sub

'main
