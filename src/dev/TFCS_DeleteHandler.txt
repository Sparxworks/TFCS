option explicit

'----------------------------------------------------------------------------------------------------------------------
' Module containing general utility methods.
' 
' This module contains no event handlers only supporting functions, so registration with EAST is indirect, through
' inclusion within other modules
'
'----------------------------------------------------------------------------------------------------------------------

' Retrieves the named element from the user temp package (userdir.temp)
' If the user temp package does not yet exist, its created.
' If the temp element does not yet exist, its created (always type 'Class') including the note as explanation.
function GetTempElement(name,notes)
	dim pck: set pck = EAST.GetPackageByFQN(GEN__WORKSPACE+"."+EAST.UserName()+".temp",true)
	on error resume next
	dim elt: set elt = pck.Elements.GetByName(name)
	if elt is nothing then
		set elt = pck.Elements.AddNew("","Class")
		elt.name = name
		elt.Notes = notes
		elt.Update()
	end if
	set GetTempElement = elt
end function

function GetPrivatePackage(model,name)
	set GetPrivatePackage = nothing
	
 	' Get the private workspace for the current user
	dim workspacePath: workspacePath = GEN__WORKSPACE+"."+EAST.UserName()
	Dim workspace : 
	on error resume next
	set workspace = EAST.GetPackageByFQN(workspacePath) 
	if err.number <> 0 then
		EAST.MsgBox EAST.StrRep(MSG_WORKSPACE_MISSING,workspacePath),16,COMM_NEW_WORKFLOW
		exit function
	end if
	on error goto 0

	' Get the package (create if not available)
	if(name <> "") then
		name = "."+name
	end if
	if model = GEN__WORKSPACE then
		' No model selected: drop in private workspace root
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+name, true)
	else
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+"."+model+name, true) 
	end if

end function

' Add an action for the supplied workflow activity to the diagram at the indicated position
' Returns the action element that was created

'-----------------------------------------------------------------------------------
' Generic diagram & element 
'-----------------------------------------------------------------------------------

' Tree selection dialog - all elements in repository, current model is default open Returns GUID of selected dgm
function SelectDiagramFromTree(title,stereotype,stereotypeName,modelDefault,allowNew)
	SelectDiagramFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_DGMSBYSTEREO,ucase(stereotype))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectDiagramFromTree: "+dict.item("RESULT"))
	SelectDiagramFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository, current model is default open. Returns GUID of selected elt
function SelectElementFromTree(title,stereotype,stereotypeName,modelDefault,allowNew,hideElement)
	SelectElementFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim hideID: hideID = 0
	if not hideElement is nothing then
		hideID = hideElement.ElementID
	end if
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO,stereotype&"|"&hideID)	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementFromTree: "+dict.item("RESULT"))
	SelectElementFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository with specific tag values, default tag open .Returns GUID of selected elt
function SelectElementTagFromTree(title,stereotype,tagName,tagValues,modelDefault,tagDefault,allowNew)
	SelectElementTagFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO_AND_TAG,stereotype+"|"+tagName+"|"+ucase(tagValues))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	dict.add "DFLT_TAG",tagDefault
	if allowNew then
		dict.add "ALLOWNEW",tagValues
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementTagFromTree: "+dict.item("RESULT"))
	SelectElementTagFromTree = dict.item("RESULT")
end function


' Returns true if an object is present on a specific diagram
function ObjectIsOnDiagram(objID,dgm)
	ObjectIsOnDiagram = false
	Dim dgmObject : 
	for each dgmObject in dgm.DiagramObjects
		if dgmObject.ElementID = objID then
			ObjectIsOnDiagram = true
			exit function
		end if
	next
end function

' Add an element as link to the diagram, return the created diagram object
function addEltToDiagram(elt, dgm, left, top)
	EAST.LogStart("addEltToDiagram")
	dim width: width = 20
	dim height: height = 30
	' TBD: Why is _sizeX/Y not working?
	select case elt.Type
	case "Issue"
		width = 200
	case "Requirement"
		width = 200
	case "Object"
		width = 150
		height = 50
	case "Class"
		width = 200
		height = 100
	case "Decision"
		width = 26
		height = 34
	case "MergeNode"
		width = 26
		height = 34
	case "Actor"
		width = 40
		height = 60
	case "UseCase"
		width = 100
		height = 70
	case "Activity"
		width = 80
		height = 60
	case "Action"
		width = 100
		if(elt.Stereotype = "TFCS_CompositeAction") then
			height = 60
		else
			height = 30
		end if
	case else
	end select
	dim right: right = left + width
	dim bottom: bottom = top + height
	dim dgmObject: set dgmObject = dgm.diagramObjects.AddNew("l="&left&";r="&right&";t="&top&";b="&bottom&";", "" )
	dgm.DiagramObjects.Refresh()
	dgmObject.ElementID = elt.ElementID 
	dgmObject.Update()

	set addEltToDiagram = dgmObject
	EAST.LogInfo("Added element to '"&dgm.name&"' at ("&left&","&top&")-("&right&","&bottom&")")
	EAST.LogEnd("addEltToDiagram")
end function

' Adds a post-it to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
function addPostIt(elt,dgm,loc,notes)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Note")
	dgmElement.Notes = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "BCol=65535;NSL=0"
	dgmObject.Update()
	
	set addPostIt = dgmObject
end function

' Adds a boundary to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
' nonSelectable: 1: niet selecteerbaar, 0: wel
function addBoundary(elt,dgm,loc,notes,nonSelectable)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Boundary")
	dgmElement.Name = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "font=Arial;fontsz=100;bold=1;italic=0;ul=0;charset=0;pitch=34;NSL="&nonSelectable
	dgmObject.Update()
	
	set addBoundary = dgmObject
end function

Function GetStyleEx(byref dgm, srch)
	GetStyleEx = ""
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos > 0 Then
        Dim ePos: ePos = InStr(sPos, style, ";")
        GetStyleEx = Mid(style, sPos+len(srch)+1, ePos-sPos-len(srch)-1)
    End If
End Function

sub SetStyleEx(byref dgm, srch, value)
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos = 0 Then
		style = style+srch+"="+value+";"
	else
	    Dim ePos: ePos = InStr(sPos, style, ";")
		style = Left(style,sPos+len(srch)+1)+value+Mid(style, ePos)
	end if
	dgm.StyleEx = style
	dgm.update()
End sub

Function GetTagByName(tags, name)

	Dim i
	Dim tag : 
	Set tag = Nothing
	If Not tags Is Nothing Then
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				Set tag = tags.GetAt(i)
				Exit For
			End If
		Next
	End If
	Set GetTagByName = tag

End Function

Function GetTagValByName(tags, name)

	Dim ret
	ret = ""

	If Not tags Is Nothing Then
		Dim i
		Dim tag : 
'		Set tag = tags.GetByName(name)
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				ret = tags.GetAt(i).Value
				Exit For
			End If
		Next
	End If

	GetTagValByName = ret

End Function


Sub SetTagValByName(tags, name, val, notes)

	If Not tags Is Nothing And Len(name) > 0 Then
		Dim tag : 
'		Set tag = tags.GetByName(name)
		Set tag = GetTagByName(tags, name)
		If Not tag Is Nothing Then
			tag.Value = val
			tag.Notes = notes
			tag.Update
			tags.Refresh
		Else
			Set tag = tags.AddNew(name, val)
			tag.notes = notes
			tag.Update
			tags.Refresh
		End If
	End If

End Sub

function GetElementByName(eltList,name)
	set GetElementByName = nothing
	
	dim elt
	for each elt in eltList
		if elt.name = name then 
			set GetElementByName = elt
			exit function
		end if
	next
end function

' Adds a property to an element
' Carefull: no check if the property already exists!
sub AddProperty(eltGUID,pName,pType,pValue,pComment)
	dim props: set props = EAST.ExecuteSQL(SQL_GET_OBJECTPROPERTIES,eltGUID)
	if props is nothing or props.count = 0  then
		' create the very first property in the set
		EAST.logerror(EAST.GenerateGUID())
		dim SQL: SQL = EAST.StrRep(SQL_INS_OBJECTPROPERTIES, _
			EAST.GenerateGUID()+"|"+eltGUID+"|"+pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(SQL)
		EAST.logerror(SQL)
	else
		dim ID : ID = props.item(0).item("XREFID")
		dim DESC : DESC = props.item(0).item("DESCRIPTION")
		DESC = DESC + EAST.StrRep("@PROP=@NAME={0}@ENDNAME;@TYPE={1}@ENDTYPE;@VALU={2}@ENDVALU;@PRMT={3}@ENDPRMT;@ENDPROP;", _
			pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(EAST.StrRep(SQL_UPD_OBJECTPROPERTIES, ID+"|"+DESC)) 
	end if
end sub

' Remove an element from the model
sub DeleteElementFromModel(elt)		
	dim elements, i
	if elt.ParentID = 0 then
		set elements = GetPackageByID(elt.PackageID).elements
	else 
		set elements = GetElementByID(elt.ParentID).elements
	end if

	for i = 0 to elements.Count - 1
		if elements.GetAt(i).ElementID = elt.ElementID then
			elements.DeleteAt i, false
			Elements.Refresh()
			EAST.LogInfo("Deleted "&elt.ElementID)
			exit sub
		end if
	next
end sub

'----------------------------------------------------------------------------------------------------------------------
' Delete handler for diagram objects.
'
' - Prevent deletion of the navigate-back-option from WF realisation diagrams
' - If the corresponding model element is no longer included in any diagram => delete it as well
'   (only for basic elements that from a user perspective are owned by a specific diagram, 
'   like action, descision,...)
'----------------------------------------------------------------------------------------------------------------------
'option explicit

'!INC TFCS_Support.TFCS_commons

const DELH_SQL_DGMOBJS = "select count(*) as RESULT from t_diagramobjects where object_id = {0}"

Function EA_OnPreDeleteDiagramObject( Info ) 
	EA_OnPreDeleteDiagramObject = true ' Continue calling other handlers

	dim elt: set elt = GetElementByID(Info.get("ID").Value)
	select case elt.Stereotype
		case "TFCS_Action"
		case "TFCS_AtomicAction"
		case "TFCS_CompositeAction"
		case "TFCS_ActivityInitial"
		case "TFCS_ActivityFinal"
		case "TFCS_Decision"
		case "TFCS_MergeNode"
		case "TFCS_Event"
		case "TFCS_DomainInstance"
		case "TFCS_IntermediateResult"
		case "TFCS_AuthorisationEffect"
		case "TFCS_Activity" 	
			' The only type of diagramobjects of this type are the ones implementing the 
			' BACK option on WF realisation diagrams (normally located in the upper-left corner)
			' They should not be removed => prevent deletion
			EA_OnPreDeleteDiagramObject = false
			exit function
		case else
			' Continue with other handlers
			exit function
	end select
	
	' The deleted diagram object is considered to be owned by the diagram so if the corresponding 
	' model element is no longer included in any diagram => delete the model element as well
	dim result: result = EAST.ExecuteScalarSQL(DELH_SQL_DGMOBJS,Cstr(elt.ElementID))
	if (not TypeName(result) = "Empty") and CInt(result) <= 1  then
		EAST.LogInfo("Element no longer used")
		DeleteElementFromModel(elt)
		EA_OnPreDeleteDiagramObject = false
	end if

end Function
