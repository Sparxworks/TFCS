option explicit

' Working directory for TFCS
const TFCSBASEDIR = "d:/TFCS/src"
const MNU_TFCSMAIN = "-EAST"

'----------------------------------------------------------------------------------------------------------------------
' DBMS specific settings (used in TFCS_SQL and TFCS_VALSQL)
' Change according to the DBMS that is used
'----------------------------------------------------------------------------------------------------------------------

dim xWCx 		' wildcard
dim xUCASEx 	' convert text to uppercase
dim xMIDx		' get substring
dim xMEMOx		' handling memo/clob fields

' .EAP (MSAccess)

xWCx = "*"	
xUCASEx = "ucase"	
xMIDx = "mid"
xMEMOx = ""
function xIfNullx(a,b)
	xIfNullx = "IIF(ISNULL("+a+"),"+b+","+a+")"
end function
function xInStrx(start,s1,s2)
	xInStrx = "InStr("+start+","+s1+","+s2+")"
end function

' Oracle

'xWCx = "%"			
'xUCASEx = "Upper"
'xMIDx = "Substr"
'xMEMOx = "dbms_lob."
'
'function IfNull(a,b)
'	IfNull = "nvl("+a+","+b+")"
'end function
'
'function InStr(start,s1,s2)
'	InStr = "InStr("+s1+","+s2+","+start+")"
'end function

'----------------------------------------------------------------------------------------------------------------------
' Module containing all SQL statements used.
' SQL is grouped on referencing module and prefixed with part of the name of that module to prevent name clashes
'----------------------------------------------------------------------------------------------------------------------

' Returns all diagrams behind composite steps on a specific diagram
Dim GEN_SQL_DGM_COMPLEXSTEPS: GEN_SQL_DGM_COMPLEXSTEPS = _
" select d.diagram_id, d.ea_guid,o.name " &_
" from t_diagram p, t_diagramobjects do" &_
"	 ,t_object o" &_
"	 ,t_object c" &_
"	 ,t_diagram d" &_
" where p.ea_guid = '{0}' and p.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.classifier = c.object_id" &_
"	 and o.stereotype = 'TFCS_CompositeAction'" &_
"	 and d.parentid = c.object_id"

' =============================================================================
' TFCS_ModelValidation
' =============================================================================
' Since there are quite a few: left in (the head of) the script file

' =============================================================================
' TFCS_DragDropHandler
' =============================================================================
dim SQL_GET_DIAGRAMOBJECT_RECT : SQL_GET_DIAGRAMOBJECT_RECT = _
	"select rectleft,recttop,rectright,rectbottom from t_diagramobjects where diagram_id = {0} and object_id = {1}"

' =============================================================================
' TFCS_DocumentGeneration
' =============================================================================

' Returns all diagrams that contain a specific object (element)
Dim DOCGEN_SQL_DIAGRAMSWITHELT: DOCGEN_SQL_DIAGRAMSWITHELT = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.ea_guid = '{0}' order by d.name"

' Returns all diagrams that contain a specific object (element) -as classifier-
dim DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER: DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o, t_object c" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id and o.classifier = c.object_id" &_
"	 and c.ea_guid = '{0}' order by  d.name"

' Returns all elements (either notes or plain text) that are contained in boundary with name 'Toelichting'
Dim DOCGEN_SQL_DGM_REMARKSFORDGM: DOCGEN_SQL_DGM_REMARKSFORDGM = _
" select tlo.object_id " &_
" from t_diagram d" &_
"		,t_diagramobjects do" &_
"		,t_object o" &_
"		,t_diagramobjects tl" &_
"		,t_object tlo" &_
" where  tlo.object_id = tl.Object_ID" &_
"		and tl.diagram_id = d.diagram_id" &_
"		and o.object_id = do.object_id" &_
"		and do.diagram_id = d.diagram_id" &_
"		and "+xUCASEx+"(o.Name) = 'TOELICHTING' and o.object_type = 'Boundary'" &_
"		and tlo.object_type in ('Note','Text')" &_
"		and tl.RectTop <= do.RectTop " &_
"		and tl.RectLeft >= do.RectLeft" &_
"		and tl.RectRight <= do.RectRight" &_
"		and tl.RectBottom >= do.RectBottom" &_
"		and d.ea_guid = '{0}'"

' =============================================================================
' TFCS_Commons
' =============================================================================
dim SQL_GET_OBJECTPROPERTIES: SQL_GET_OBJECTPROPERTIES= _
	"select XRefID,description as RESULT from t_xref where description like '@PROP"+xWCx+"' and client='{0}'"

const SQL_UPD_OBJECTPROPERTIES = "update t_xref set description = '{1}' where XRefID = '{0}'"
dim SQL_INS_OBJECTPROPERTIES: SQL_INS_OBJECTPROPERTIES = "insert into t_xref "&_
		" (XRefID,name,type,visibility,Namespace,Requirement,Constraint,Behavior,partition,description,client,supplier,link)" &_
		" values ('{0}','CustomProperties', 'element property', 'Public','','','','', 0, " &_
		" '@PROP=@NAME={2}@ENDNAME;@TYPE={3}@ENDTYPE;@VALU={4}@ENDVALU;@PRMT={5}@ENDPRMT;@ENDPROP;', "&_
		" '{1}','<none>','')"
		
dim COMM_SQL_DGMSBYSTEREO : COMM_SQL_DGMSBYSTEREO = _
  " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , d.name " _
+ " , d.ea_guid " _
+ " from ((((((t_diagram d  ) " _
+ " inner join t_package pck0 on d.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where d.StyleEx like '"+xWCx+"MDGDgm=TFCS::{0}"+xWCx+"' " _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", d.name"
dim COMM_SQL_ELTSBYSTEREO_AND_TAG : COMM_SQL_ELTSBYSTEREO_AND_TAG = _
 " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , tv.value " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o inner join t_objectproperties tv on tv.object_id = o.object_id  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"(o.Stereotype) = "+xUCASEx+"('{0}') " _
+ " 	and "+xUCASEx+"(tv.property) = "+xUCASEx+"('{1}') and " _
+xUCASEx+"('{2}') like '"+xWCx+"'+"+xUCASEx+"(tv.value)+'"+xWCx+"' and tv.value is not null" _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", tv.value, o.name"
dim COMM_SQL_ELTSBYSTEREO : COMM_SQL_ELTSBYSTEREO = _
 " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"('{0}') like '"+xWCx+"'+"+xUCASEx+"(o.Stereotype)+'"+xWCx+"' and o.Stereotype is not null and o.object_id <> {1}" _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", o.name"
dim COMM_SQL_GETMODELS : COMM_SQL_GETMODELS = "select name from t_package where parent_id = 0 and name <> 'TFCS' order by name"

'----------------------------------------------------------------------------------------------------------------------
' Module containing all texts used throughout TFCS -that are visible to the enduser- 
' Texts are grouped on the referencing module and prefixed with a module identifier to prevent name clashes.
'
' NOTE: some texts are/can be referenced by several modules (like eg workspace name), 
' this is indicated by a the prefix GEN with double underscore
'----------------------------------------------------------------------------------------------------------------------

' =============================================================================
' TFCS_ModelValidation
' =============================================================================
const VAL_NO_RELATIONS_ALLOWED = "Dit element mag geen enkele relatie met andere elementen hebben. Leg de relatie op een andere manier."
const VAL_ACT_ON_DGM = "Mag op geen enkel diagram voorkomen. Verwijder deze (als deze onderdeel vormt van een workflow: plaats deze vervolgens als stap (scherm/complex of subflow)."
const VAL_ISSUE_NOT_REALISED = "Issue is nergens aan gerelateerd. Koppel deze aan het(de) modelelement(en) waarop deze betrekking heeft."
const VAL_REQ_NOT_REALISED = "Requirement is niet gerealiseerd. Koppel de model element(en) die in deze requirement voorzien." 
const VAL_UNKNOWN_STEREOTYPE = "Dit stereotype wordt nog niet gevalideerd: {0}. Neem contact op met de beheerder van TFCS."
const VAL_ACTOR_UNUSED = "Actor is bij geen enkele workflow betrokken. Koppel de actor aan ten minste EEN workflow."
const VAL_ELT_NOT_USED = "Domein instance wordt niet gebruikt. Neem deze op in een workflow of workflow definitie en koppel deze."
const VAL_ELT_NOT_ON_DIAGRAM = "Het element is niet opgenomen in een diagram van type {0}."
const VAL_WF_NOT_ON_UCDEFDGM = "Workflow is in geen enkele workflow specificatie opgenomen ({0})."
const VAL_WF_NOT_ON_UCDGM = "Workflow is in geen enkel workflow overzicht opgenomen ({0})."
const VAL_ACTOR_NOT_ON_UCDEFDGM = "Actor is in geen enkele workflow specificatie opgenomen ({0})."
const VAL_ACTOR_NOT_ON_UCDGM = "Actor is in geen enkel workflow overzicht opgenomen ({0})."
const VAL_MULTIPLE_STEREOTYPES = "Dit element heeft meerdere stereotypen ({0}), dit is niet toegestaan. Zorg ervoor dat het element een enkel stereotype heeft."
const VAL_ELT_NOT_PART_OF_FLOW = "Element maakt geen deel uit van een workflow. Neem het element in een workflow op."
const VAL_COMP_IN_COMP = "Opgenomen in een diagram van een ander scherm of component. Een component of scherm mag zelf geen verdere verdiepingen bevatten."
const VAL_WF_ISON_DIAGRAM = "Dit element mag niet in een diagram worden opgenomen. Vervang deze door een bijbehorende stap (workflow)."
const VAL_MISSING_WFDEFN_DIAGRAM = "Dit element moet precies 1 diagram bevatten en dit moet een workflowdefinitie diagram zijn."
const VAL_MISSING_WF_DIAGRAM = "Dit element moet precies 1 diagram bevatten en dit moet een workflowrealisatie diagram zijn."
const VAL_DOMRULE_NOT_REALISED = "Domeinregel is aan geen enkel domeinobject gerelateerd."
const VAL_ELT_ON_INVALID_DGM = "Element bevind zich op een diagram waar dit niet thuis hoort "
const VAL_INVALID_SUBFLOW = "Een workflow mag alleen subflows van eenzelfde of lager niveau bevatten, dus bv een werkinstructie mag geen bedrijfsproces als stap bevatten."
const VAL_WF_IS_NOT_USED = "Deze workflow wordt niet gebruikt. Als deze workflow het hoogste niveau is dan zal dit kloppen, neem anders de workflow als subflow op binnen een andere workflow."
const VAL_COMP_IS_NOT_USED = "Deze component wordt niet gebruikt. Neem  de component op als stap in een of meer workflows."
const VAL_AI_IS_NOT_USED = "Dit autorisatieitem is nog niet gebruikt. Koppel deze aan de te autoriseren handelingen/gegevens."
const VAL_WFTYPETAG_MISSING = "Tag 'WorkflowType' ontbreekt of heeft een ongeldige waarde (waarde moet zijn een van {0})"
const VAL_WFTYPETAG_DIFFERS = "Niveau van de stap wijkt af van dat van de subflow (WorkflowType is {0} ipv {1}). Verwijder de stap en plaats deze opnieuw."
const VAL_WF_MISSING_UCELT = "De naam van dit element moet gelijk zijn aan de naam van de use case ({0})"
const VAL_INVALID_WF_EXTENSION = "De workflow mag alleen extenden van een workflow van hetzelfde niveau ({0})"
const VAL_REVERSED_CONNECTOR = "Een relatie van type 'Destination -> Source' is niet toegestaan. Verwijder de relatie en leg deze opnieuw."
const VAL_PROGRAM_FAILURE = "Er is een fout opgetreden in de validatie. Neem contact op met de beheerder van TFCS (fout in {0})."
const VAL_RELATION_NOT_VALID = "Deze relatie is hier niet toegestaan ({0} van {1}({2}) -> {3}({4}))."
const VAL_RELATIONSTEREO_NOT_VALID = "Stereotype van deze relatie is niet toegestaan {5}({0}) van {1}({2}) -> {3}({4})). Verwijder de relatie en leg deze opnieuw."
const VAL_WF_ACT_NAMES_NOT_SAME = "De naam van de workflow volgt niet de standaard. Controleer de naamgeving van de elementen in de projectbrowser bij deze workflow."
const VAL_UC_MISSING_FOR_WF = "Het UC element ontbreekt of heeft niet dezelfde naam als de activity."
const VAL_SUBLOWS_NOT_ALLOWED = "Een stap van type subflow is hier niet toegestaan."
const VAL_WFSTEP_INVALID_IN_WORKFLOW = "Een stap van type '{0}' mag niet zijn opgenomen in een workflow van een type {1}."
const VAL_WFSTEP_INVALID_IN_COMPONENT = "Een subflow mag alleen worden opgenomen in een andere workflow en niet in een scherm of component."
const VAL_NO_CLASSIFIERINST_ON_FLOWDEFDGM = "Het domeinobject ontbreekt nog in de definitie van de workflow. Voeg deze daar nog toe."
const VAL_NO_CLASSIFIER_ON_FLOWDEFDGM = "Het bijbehorende autorisatieitem ontbreekt nog in de definitie van de workflow. Voeg deze daar nog toe."
const VAL_INFO_ADDED_AI_TO_WFDEFN = "Autorisatie '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_REQ_TO_WFDEFN = "Requirement '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_ELT_TO_WFDEFN = "Impliciet gerelateerd element '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_DO_TO_WFDEFN = "Domeinobject '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_DGM_INVALID_PARENT = "Plaats het diagram onder een element van een type '{0}'."
const VAL_INFO_ADDED_RELATED_TO_WFDEFN = "Aan de workflow gerelateerd element '{0}' toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_WF_TO_WFDEFN = "Subflow '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_ACTION_MISSING_CLASSIFIER = "De workflow waarop deze stap is gebaseerd is verwijderd uit het model. Verwijder ook deze stap."
const VAL_COMP_MISSING_CLASSIFIER = "De component of het scherm waarop deze stap is gebaseerd is verwijderd uit het model. Verwijder ook deze stap."
const VAL_AUT_MISSING_CLASSIFIER = "De autorisatie wat dit effect heeft is verwijderd uit het model. Verwijder ook dit effect."
const VAL_DOMAIN_MISSING_CLASSIFIER = "Het domeinobject is verwijderd uit het model. Verwijder deze ook hier."
const VAL_NON_TFCS_ELEMENT = "Dit element mag niet gebruikt worden binnen TFCS. Als het niet gebruikt wordt verwijder het dan, anders vervang dit door een modelelement uit TFCS."
const VAL_NO_RELATIONS_ALLOWED_OFTYPE = "Dit element mag geen relatie met andere elementen hebben van type {0}. Leg de relatie op een andere manier."
const VAL_ELT_ON_OTHER_DIAGRAM = "Dit element is (ook) opgenomen op een ander diagram. Zorg ervoor dat dit element alleen is opgenomen in het diagram waarbij deze in de project browser is vastgelegd."
const VAL_MISSING_INCLUDES_EXTENDS ="Leg een include of extend relatie van '{1}' naar '{0}' of verwijder '{0}' van het diagram."
const VAL_COMP_ON_COMPDGM = "Een complexe stap mag alleen binnen een diagram van een workflow worden opgenomen. Verwijder de stap of neem het diagram over bij een workflow."

' =============================================================================
' Menu items
' =============================================================================
const DOCGEN_OUTPUT_LOCATION = "Selecteer de map voor de output bestanden."

const MNU_GENERATE_WFSPEC = "Genereer workflow specificatie"
const MNU_GENERATECONTEXTRTF = "Genereer context document"

' =============================================================================
' TFCS_Commons
' =============================================================================
const COMM_NEW_WORKFLOW = "Nieuwe workflow"
dim COMM_WORKSPACE_MISSING: COMM_WORKSPACE_MISSING = _
	"Kon de workspace van de gebruiker niet vinden:"+vbCRLF+vbCRLF+"     {0}"+vbCRLF+vbCRLF+"Maak deze eerst aan"+vbCRLF

' =============================================================================
' TFCS_CreateFromToolbox/TFCS_CreateFromProjectBrowser
' =============================================================================
' TFCS elementtype not allowed on TFCS diagram
const DDH_TITLE_NOTALL = "TFCS Model validatie"
dim DDH_PROMPT_USE_TOOLBOX : DDH_PROMPT_USE_TOOLBOX = "Dit soort elementen kunnen alleen via de"+ _
	vbCRLF+" toolbox op dit diagram worden opgenomen"
dim DDH_PROMT_NOTALL : DDH_PROMT_NOTALL = "Dit element is niet toegestaan"+vbCRLF+"op {0} diagram"
dim DDH_PROMPT_PBCR_NOTALLOWED : DDH_PROMPT_PBCR_NOTALLOWED = _
	"Modelelementen mogen alleen via de toolbox"+vbCRLF+"bij een diagram worden aangemaakt."
const DDH_NOTALL_FLOWDEFDGM = "een workflow definitie"
const DDH_NOTALL_GENERICTYPE = "dit type"
const DDH_NOTALL_FLOWSDGM = "een workflow overzicht"
const DDH_NOTALL_FLOWDGM = "een workflow realisatie"
const DDH_NOTALL_DOMAINDGM = "een domein"
const DDH_NOTALL_REQDGM = "een requirements"
const DDH_NOTALL_MNTDGM = "een beheer"

' TFCS element already present in diagram
dim DDH_PROMPT_ELTONDGM : DDH_PROMPT_ELTONDGM = "Dit element is al opgenomen op dit diagram"+vbCRLF+"U kunt dit element maar 1x opnemen"
const DDH_TITLE_ELTONDGM = "TFCS Model validatie"

'----------------------------------------------------------------------------------------------------------------------
' Module containing general utility methods.
' 
' This module contains no event handlers only supporting functions, so registration with EAST is indirect, through
' inclusion within other modules
'
'----------------------------------------------------------------------------------------------------------------------

' Retrieves the named element from the user temp package (userdir.temp)
' If the user temp package does not yet exist, its created.
' If the temp element does not yet exist, its created (always type 'Class') including the note as explanation.
function GetTempElement(name,notes)
	dim pck: set pck = EAST.GetPackageByFQN(GEN__WORKSPACE+"."+EAST.UserName()+".temp",true)
	on error resume next
	dim elt: set elt = pck.Elements.GetByName(name)
	if elt is nothing then
		set elt = pck.Elements.AddNew("","Class")
		elt.name = name
		elt.Notes = notes
		elt.Update()
	end if
	set GetTempElement = elt
end function

function GetPrivatePackage(model,name)
	set GetPrivatePackage = nothing
	
 	' Get the private workspace for the current user
	dim workspacePath: workspacePath = GEN__WORKSPACE+"."+EAST.UserName()
	Dim workspace : 
	on error resume next
	set workspace = EAST.GetPackageByFQN(workspacePath) 
	if err.number <> 0 then
		EAST.MsgBox EAST.StrRep(MSG_WORKSPACE_MISSING,workspacePath),16,COMM_NEW_WORKFLOW
		exit function
	end if
	on error goto 0

	' Get the package (create if not available)
	if(name <> "") then
		name = "."+name
	end if
	if model = GEN__WORKSPACE then
		' No model selected: drop in private workspace root
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+name, true)
	else
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+"."+model+name, true) 
	end if

end function

' Add an action for the supplied workflow activity to the diagram at the indicated position
' Returns the action element that was created

'-----------------------------------------------------------------------------------
' Generic diagram & element 
'-----------------------------------------------------------------------------------

' Tree selection dialog - all elements in repository, current model is default open Returns GUID of selected dgm
function SelectDiagramFromTree(title,stereotype,stereotypeName,modelDefault,allowNew)
	SelectDiagramFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_DGMSBYSTEREO,ucase(stereotype))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectDiagramFromTree: "+dict.item("RESULT"))
	SelectDiagramFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository, current model is default open. Returns GUID of selected elt
function SelectElementFromTree(title,stereotype,stereotypeName,modelDefault,allowNew,hideElement)
	SelectElementFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim hideID: hideID = 0
	if not hideElement is nothing then
		hideID = hideElement.ElementID
	end if
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO,stereotype&"|"&hideID)	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementFromTree: "+dict.item("RESULT"))
	SelectElementFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository with specific tag values, default tag open .Returns GUID of selected elt
function SelectElementTagFromTree(title,stereotype,tagName,tagValues,modelDefault,tagDefault,allowNew)
	SelectElementTagFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO_AND_TAG,stereotype+"|"+tagName+"|"+ucase(tagValues))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	dict.add "DFLT_TAG",tagDefault
	if allowNew then
		dict.add "ALLOWNEW",tagValues
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementTagFromTree: "+dict.item("RESULT"))
	SelectElementTagFromTree = dict.item("RESULT")
end function


' Returns true if an object is present on a specific diagram
function ObjectIsOnDiagram(objID,dgm)
	ObjectIsOnDiagram = false
	Dim dgmObject : 
	for each dgmObject in dgm.DiagramObjects
		if dgmObject.ElementID = objID then
			ObjectIsOnDiagram = true
			exit function
		end if
	next
end function

' Add an element as link to the diagram, return the created diagram object
function addEltToDiagram(elt, dgm, left, top)
	EAST.LogStart("addEltToDiagram")
	dim width: width = 20
	dim height: height = 30
	' TBD: Why is _sizeX/Y not working?
	select case elt.Type
	case "Issue"
		width = 200
	case "Requirement"
		width = 200
	case "Object"
		width = 150
		height = 50
	case "Class"
		width = 200
		height = 100
	case "Decision"
		width = 26
		height = 34
	case "MergeNode"
		width = 26
		height = 34
	case "Actor"
		width = 40
		height = 60
	case "UseCase"
		width = 100
		height = 70
	case "Activity"
		width = 80
		height = 60
	case "Action"
		width = 100
		if(elt.Stereotype = "TFCS_CompositeAction") then
			height = 60
		else
			height = 30
		end if
	case else
	end select
	dim right: right = left + width
	dim bottom: bottom = top + height
	dim dgmObject: set dgmObject = dgm.diagramObjects.AddNew("l="&left&";r="&right&";t="&top&";b="&bottom&";", "" )
	dgm.DiagramObjects.Refresh()
	dgmObject.ElementID = elt.ElementID 
	dgmObject.Update()

	set addEltToDiagram = dgmObject
	EAST.LogInfo("Added element to '"&dgm.name&"' at ("&left&","&top&")-("&right&","&bottom&")")
	EAST.LogEnd("addEltToDiagram")
end function

' Adds a post-it to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
function addPostIt(elt,dgm,loc,notes)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Note")
	dgmElement.Notes = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "BCol=65535;NSL=0"
	dgmObject.Update()
	
	set addPostIt = dgmObject
end function

' Adds a boundary to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
' nonSelectable: 1: niet selecteerbaar, 0: wel
function addBoundary(elt,dgm,loc,notes,nonSelectable)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Boundary")
	dgmElement.Name = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "font=Arial;fontsz=100;bold=1;italic=0;ul=0;charset=0;pitch=34;NSL="&nonSelectable
	dgmObject.Update()
	
	set addBoundary = dgmObject
end function

Function GetStyleEx(byref dgm, srch)
	GetStyleEx = ""
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos > 0 Then
        Dim ePos: ePos = InStr(sPos, style, ";")
        GetStyleEx = Mid(style, sPos+len(srch)+1, ePos-sPos-len(srch)-1)
    End If
End Function

sub SetStyleEx(byref dgm, srch, value)
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos = 0 Then
		style = style+srch+"="+value+";"
	else
	    Dim ePos: ePos = InStr(sPos, style, ";")
		style = Left(style,sPos+len(srch)+1)+value+Mid(style, ePos)
	end if
	dgm.StyleEx = style
	dgm.update()
End sub

Function GetTagByName(tags, name)

	Dim i
	Dim tag : 
	Set tag = Nothing
	If Not tags Is Nothing Then
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				Set tag = tags.GetAt(i)
				Exit For
			End If
		Next
	End If
	Set GetTagByName = tag

End Function

Function GetTagValByName(tags, name)

	Dim ret
	ret = ""

	If Not tags Is Nothing Then
		Dim i
		Dim tag : 
'		Set tag = tags.GetByName(name)
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				ret = tags.GetAt(i).Value
				Exit For
			End If
		Next
	End If

	GetTagValByName = ret

End Function


Sub SetTagValByName(tags, name, val, notes)

	If Not tags Is Nothing And Len(name) > 0 Then
		Dim tag : 
'		Set tag = tags.GetByName(name)
		Set tag = GetTagByName(tags, name)
		If Not tag Is Nothing Then
			tag.Value = val
			tag.Notes = notes
			tag.Update
			tags.Refresh
		Else
			Set tag = tags.AddNew(name, val)
			tag.notes = notes
			tag.Update
			tags.Refresh
		End If
	End If

End Sub

function GetElementByName(eltList,name)
	set GetElementByName = nothing
	
	dim elt
	for each elt in eltList
		if elt.name = name then 
			set GetElementByName = elt
			exit function
		end if
	next
end function

' Adds a property to an element
' Carefull: no check if the property already exists!
sub AddProperty(eltGUID,pName,pType,pValue,pComment)
	dim props: set props = EAST.ExecuteSQL(SQL_GET_OBJECTPROPERTIES,eltGUID)
	if props is nothing or props.count = 0  then
		' create the very first property in the set
		EAST.logerror(EAST.GenerateGUID())
		dim SQL: SQL = EAST.StrRep(SQL_INS_OBJECTPROPERTIES, _
			EAST.GenerateGUID()+"|"+eltGUID+"|"+pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(SQL)
		EAST.logerror(SQL)
	else
		dim ID : ID = props.item(0).item("XREFID")
		dim DESC : DESC = props.item(0).item("DESCRIPTION")
		DESC = DESC + EAST.StrRep("@PROP=@NAME={0}@ENDNAME;@TYPE={1}@ENDTYPE;@VALU={2}@ENDVALU;@PRMT={3}@ENDPRMT;@ENDPROP;", _
			pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(EAST.StrRep(SQL_UPD_OBJECTPROPERTIES, ID+"|"+DESC)) 
	end if
end sub

' Remove an element from the model
sub DeleteElementFromModel(elt)		
	dim elements, i
	if elt.ParentID = 0 then
		set elements = GetPackageByID(elt.PackageID).elements
	else 
		set elements = GetElementByID(elt.ParentID).elements
	end if

	for i = 0 to elements.Count - 1
		if elements.GetAt(i).ElementID = elt.ElementID then
			elements.DeleteAt i, false
			Elements.Refresh()
			EAST.LogInfo("Deleted "&elt.ElementID)
			exit sub
		end if
	next
end sub

'----------------------------------------------------------------------------------------------------------------------
' Consistency checks in response to creation of new model elements
'
' Note that it is not the intention of these checks to completely prevent users from making mistakes,
' just the more obvious ones.
'
' A user can run ad-hoc checks to report all violations against the (TFCS-) consistencyrules 
' (module TFCS_ModelValidation)
'----------------------------------------------------------------------------------------------------------------------
'option explicit

'!INC TFCS_Support.TFCS_Constants
'!INC TFCS_Support.TFCS_SQL
'!INC TFCS_Support.TFCS_TEXTS
'!INC TFCS_Support.TFCS_commons

'----------------------------------------------------------------------------------------------------------------------
' Constraints on element creation
'----------------------------------------------------------------------------------------------------------------------

' Ensures that drag-n-drop of model elements is consistent with TFCS:
' - drag-n-drop of TFCS elements on TFCS diagrams only allowed when included in a toolbox for that diagram
' - drag-n-drop of TFCS elements on non-TFCS diagrams is allowed
' - drag-n-drop of non-TFCS elements on TFCS diagrams is not allowed
' 
' Also creation of new TFCS elements using other means than TFCS toolboxes is not allowed
Function EA_OnPreNewElement( Info ) 
	EA_OnPreNewElement = true
	dim diagramID: diagramID = CInt(Info.get("DiagramID").value)
	dim eltType: eltType = Info.get("Type")
	dim eltStereoType: eltStereoType = Info.get("Stereotype")
	if  diagramID = 0 then
		' BLOCK: new modelelements must be created using one of the diagram toolboxes
		EA_OnPreNewElement = false
		EAST.MsgBox DDH_PROMPT_PBCR_NOTALLOWED,16,DDH_TITLE_NOTALL
	elseif eltType = "CallBehaviorAction" or (eltType = "Object" and eltStereoType = "") then
		' BLOCK: it is not allowed to create new element instances other then through the diagram toolboxes
		EA_OnPreNewElement = false
		EAST.MsgBox DDH_PROMPT_PBCR_NOTALLOWED,16,DDH_TITLE_NOTALL
	end if
end function

' Verify that the object placed on the diagram is allowed on that diagram
Function EA_OnPreNewDiagramObject( Info ) 
	EA_OnPreNewDiagramObject = true
	dim ID: ID = CInt(Info.get("ID").value)
	if ID <> 0 then
		if ObjectIsOnDiagram(ID,GetCurrentDiagram()) then
			' BLOCK: object cannot be included more than once
			EA_OnPreNewDiagramObject = false
			EAST.MsgBox DDH_PROMPT_ELTONDGM,16,DDH_TITLE_NOTALL
		else
			dim eltType: eltType = Info.get("Type").value
			if eltType = "Package" then
				' allowed
			elseif eltType = "Diagram" then
				' allowed
			else
				dim dgm: set dgm = GetCurrentDiagram()
				if(dgm is nothing) then exit function end if
				dim dgmStereo : dgmStereo = GetStyleEx(dgm,"MDGDgm")
				if Left(dgmStereo,4) <> "TFCS" then	
					' allowed
					EAST.LogWarning("Diagram is non-TFCS => standard EA handling")
				else
					dim eltDropped: set eltDropped = GetElementByID(ID)
					dim eltStereo : eltStereo = eltDropped.Stereotype
					if eltStereo = "" or Left(eltStereo,4) <> "TFCS" then
						if eltType = "Artifact" _
							or eltType = "Note" _
							or eltType = "Text" _
							or eltType = "Constraint" _
							or eltType = "Boundary" _
							or eltType = "Package" _
							or eltType = "UMLDiagram" Then
							' Common basic types allowed, standard EA handling
							EAST.LogInfo("Drop of artifact,note,text,constraint,boundaries on TFCS dgm => OK")
						elseif eltType = "" then
							EAST.LogWarning("Inserting new element: elementtype missing (maybe copy-paste?) => silently ignored")
							EA_OnPreNewDiagramObject = false
						else
							EAST.LogInfo("Non-TFCS element '"+eltType+"' drop on TFCS diagram '"+dgmStereo+"' => not allowed ")
							EA_OnPreNewDiagramObject = false
							EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_GENERICTYPE),16,DDH_TITLE_NOTALL
						end if
					else
						' TFCS element on TFCS diagram
						EA_OnPreNewDiagramObject = VerifyDropOnTFCSDiagram(dgmStereo,eltStereo) 
					end if
				end if
			end if
		end if
	end if
end function

'----------------------------------------------------------------------------------------------------------------------
' Constraints on creation of relationships between elements
'----------------------------------------------------------------------------------------------------------------------

' Prevent creation of relations between TFCS and non-TFCS elements
Function EA_OnPreNewConnector( Info ) 
	EA_OnPreNewConnector = true
	
	Dim client : 
	set client = Repository.GetElementByID(CInt(Info.Get("ClientID")))
	Dim supplier : 
	set supplier = Repository.GetElementByID(CInt(Info.Get("SupplierID")))
	dim cltIsTFCS : cltIsTFCS = (Left(client.Stereotype,5) = "TFCS_")
	dim suppIsTFCS : suppIsTFCS = (Left(supplier.Stereotype,5) = "TFCS_")

	if((cltIsTFCS and not suppIsTFCS) or (suppIsTFCS and not cltIsTFCS)) then
		dim cltType : cltType = client.Type
		dim suppType : suppType = supplier.Type
		if cltType = "Artifact" or cltType = "Note" _
				or cltType = "Text" or cltType = "Constraint" or cltType = "Boundary" _
			or suppType = "Artifact" or suppType = "Note" _
				or suppType = "Text" or suppType = "Constraint" or suppType = "Boundary" Then
			' all is well
		else
			EAST.MsgBox "Relaties tussen '"+client.Name+"' en '"+supplier.Name+"' zijn niet toegestaan",16,"Model validatiefout"
			EA_OnPreNewConnector = false
		end if
	end if
end Function

'----------------------------------------------------------------------------------------------------------------------
' Constraints on diagram creation
'----------------------------------------------------------------------------------------------------------------------


' Additional checks:
' - it should not be possible to create a WF definition or -realisation diagram using 
'   add diagram options
' - Tag WorkflowType must never be removed
' - Prevent creation of non-TFCS elements in TFCS packages
' - Prevent creation of TFCS elements on non-TFCS diagrams
' - naming convention UCactivity - UC - & diagrams
'----------------------------------------------------------------------------------------------------------------------



'----------------------------------------------------------------------------------------------------------------------
' Helper functions
'----------------------------------------------------------------------------------------------------------------------

' Verifty if drop of TFCS element on TFCS diagrams is legal
' Basically: if the element isn't included in one of the diagram toolboxes, 
' it's illegal to drop it on the diagram
function VerifyDropOnTFCSDiagram(dgmStereo,eltStereo)
	VerifyDropOnTFCSDiagram = true ' Default: drop is allowed

	select case dgmStereo 
		case "TFCS::TFCS_FlowsDiagram"
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment"+ _
				",TFCS_Actor,TFCS_Workflow" + _
				",TFCS_Requirement,TFCS_NFR,TFCS_Legislation,",eltStereo+",") = 0 then
				EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_FLOWSDGM),16,DDH_TITLE_NOTALL
				VerifyDropOnTFCSDiagram = false
			end if
		case "TFCS::TFCS_FlowDefnDiagram" 
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment"+ _
				",TFCS_Actor,TFCS_Workflow" + _
				",TFCS_Requirement,TFCS_NFR,TFCS_Legislation,",eltStereo+",") = 0 then
				if InStr("TFCS_DomainObject,",eltStereo+",") > 0 then
					EAST.MsgBox DDH_PROMPT_USE_TOOLBOX,16,DDH_TITLE_NOTALL
				else
					EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_FLOWDEFDGM),16,DDH_TITLE_NOTALL
				end if
				VerifyDropOnTFCSDiagram = false
			end if
		case "TFCS::TFCS_FlowDiagram"
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment"+ _
				",TFCS_Requirement,TFCS_NFR,TFCS_Legislation",eltStereo+",") = 0 then
				if InStr("TFCS_Event,TFCS_MergeNode,TFCS_Decision,TFCS_IntermediateResult,TFCS_AtomicAction,TFCS_CompositeActivity"+ _
					",TFCS_ActivityFinal,TFCS_ActivityInitial,TFCS_CompositeAction,TFCS_Workflow,TFCS_DomainObject"+ _
					",TFCS_DomainInstance,TFCS_AuthorisationEffect,TFCS_Action,TFCS_Authorisation,TFCS_GUI,",eltStereo+",") > 0 then
					EAST.MsgBox DDH_PROMPT_USE_TOOLBOX,16,DDH_TITLE_NOTALL
				else
					EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_FLOWDGM),16,DDH_TITLE_NOTALL
				end if
				VerifyDropOnTFCSDiagram = false
			end if
		case "TFCS::TFCS_DomainDiagram" 
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment"+ _
				",TFCS_DomainObject,TFCS_DomainRule" + _
				",TFCS_Requirement,TFCS_NFR,TFCS_Legislation,",eltStereo+",") = 0 then
				EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_DOMAINDGM),16,DDH_TITLE_NOTALL
				VerifyDropOnTFCSDiagram = false
			end if
		case "TFCS::TFCS_RequirementsDiagram"
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment"+ _
				",TFCS_Requirement,TFCS_NFR,TFCS_Legislation,TFCS_Authorisation,",eltStereo+",") = 0 then
				EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_REQDGM),16,DDH_TITLE_NOTALL
				VerifyDropOnTFCSDiagram = false
			end if
		case "TFCS::TFCS_MaintenanceDiagram" 
			if InStr("TFCS_Issue,TFCS_Request,TFCS_TBD,TFCS_Ambiguity,TFCS_ReviewComment,",eltStereo+",") = 0 then
				EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_MNTDGM),16,DDH_TITLE_NOTALL
				VerifyDropOnTFCSDiagram = false
			end if
		case else
			EAST.MsgBox EAST.StrRep(DDH_PROMT_NOTALL,DDH_NOTALL_GENERICTYPE),16,DDH_TITLE_NOTALL
			VerifyDropOnTFCSDiagram = false
	end select
	
	if VerifyDropOnTFCSDiagram = false then
		EAST.LogInfo("Drop of '"+eltStereo+"' on TFCS diagram '"+dgmStereo+"' is not allowed")
	end if
	
end function
