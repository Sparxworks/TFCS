option explicit

' Working directory for TFCS
const TFCSBASEDIR = "d:/TFCS/src"
const MNU_TFCSMAIN = "-EAST"

'----------------------------------------------------------------------------------------------------------------------
' DBMS specific settings (used in TFCS_SQL and TFCS_VALSQL)
' Change according to the DBMS that is used
'----------------------------------------------------------------------------------------------------------------------

dim xWCx 		' wildcard
dim xUCASEx 	' convert text to uppercase
dim xMIDx		' get substring
dim xMEMOx		' handling memo/clob fields

' .EAP (MSAccess)

xWCx = "*"	
xUCASEx = "ucase"	
xMIDx = "mid"
xMEMOx = ""
function xIfNullx(a,b)
	xIfNullx = "IIF(ISNULL("+a+"),"+b+","+a+")"
end function
function xInStrx(start,s1,s2)
	xInStrx = "InStr("+start+","+s1+","+s2+")"
end function

' Oracle

'xWCx = "%"			
'xUCASEx = "Upper"
'xMIDx = "Substr"
'xMEMOx = "dbms_lob."
'
'function IfNull(a,b)
'	IfNull = "nvl("+a+","+b+")"
'end function
'
'function InStr(start,s1,s2)
'	InStr = "InStr("+s1+","+s2+","+start+")"
'end function

'----------------------------------------------------------------------------------------------------------------------
' Module containing all SQL statements used.
' SQL is grouped on referencing module and prefixed with part of the name of that module to prevent name clashes
'----------------------------------------------------------------------------------------------------------------------

' Returns all diagrams behind composite steps on a specific diagram
Dim GEN_SQL_DGM_COMPLEXSTEPS: GEN_SQL_DGM_COMPLEXSTEPS = _
" select d.diagram_id, d.ea_guid,o.name " &_
" from t_diagram p, t_diagramobjects do" &_
"	 ,t_object o" &_
"	 ,t_object c" &_
"	 ,t_diagram d" &_
" where p.ea_guid = '{0}' and p.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.classifier = c.object_id" &_
"	 and o.stereotype = 'TFCS_CompositeAction'" &_
"	 and d.parentid = c.object_id"

' =============================================================================
' TFCS_ModelValidation
' =============================================================================
' Since there are quite a few: left in (the head of) the script file

' =============================================================================
' TFCS_DragDropHandler
' =============================================================================
dim SQL_GET_DIAGRAMOBJECT_RECT : SQL_GET_DIAGRAMOBJECT_RECT = _
	"select rectleft,recttop,rectright,rectbottom from t_diagramobjects where diagram_id = {0} and object_id = {1}"

' =============================================================================
' TFCS_DocumentGeneration
' =============================================================================

' Returns all diagrams that contain a specific object (element)
Dim DOCGEN_SQL_DIAGRAMSWITHELT: DOCGEN_SQL_DIAGRAMSWITHELT = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id" &_
"	 and o.ea_guid = '{0}' order by d.name"

' Returns all diagrams that contain a specific object (element) -as classifier-
dim DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER: DOCGEN_SQL_DIAGRAMSWITHELTASCLASSIFIER = _
" select d.ea_guid as EA_GUID" &_
"    ,d.diagram_id as ID" &_
" from t_diagram d" &_
"	 ,t_diagramobjects do" &_
"	 ,t_object o, t_object c" &_
" where d.diagram_id = do.diagram_id" &_
"	 and do.object_id = o.object_id and o.classifier = c.object_id" &_
"	 and c.ea_guid = '{0}' order by  d.name"

' Returns all elements (either notes or plain text) that are contained in boundary with name 'Toelichting'
Dim DOCGEN_SQL_DGM_REMARKSFORDGM: DOCGEN_SQL_DGM_REMARKSFORDGM = _
" select tlo.object_id " &_
" from t_diagram d" &_
"		,t_diagramobjects do" &_
"		,t_object o" &_
"		,t_diagramobjects tl" &_
"		,t_object tlo" &_
" where  tlo.object_id = tl.Object_ID" &_
"		and tl.diagram_id = d.diagram_id" &_
"		and o.object_id = do.object_id" &_
"		and do.diagram_id = d.diagram_id" &_
"		and "+xUCASEx+"(o.Name) = 'TOELICHTING' and o.object_type = 'Boundary'" &_
"		and tlo.object_type in ('Note','Text')" &_
"		and tl.RectTop <= do.RectTop " &_
"		and tl.RectLeft >= do.RectLeft" &_
"		and tl.RectRight <= do.RectRight" &_
"		and tl.RectBottom >= do.RectBottom" &_
"		and d.ea_guid = '{0}'"

' =============================================================================
' TFCS_Commons
' =============================================================================
dim SQL_GET_OBJECTPROPERTIES: SQL_GET_OBJECTPROPERTIES= _
	"select XRefID,description as RESULT from t_xref where description like '@PROP"+xWCx+"' and client='{0}'"

const SQL_UPD_OBJECTPROPERTIES = "update t_xref set description = '{1}' where XRefID = '{0}'"
dim SQL_INS_OBJECTPROPERTIES: SQL_INS_OBJECTPROPERTIES = "insert into t_xref "&_
		" (XRefID,name,type,visibility,Namespace,Requirement,Constraint,Behavior,partition,description,client,supplier,link)" &_
		" values ('{0}','CustomProperties', 'element property', 'Public','','','','', 0, " &_
		" '@PROP=@NAME={2}@ENDNAME;@TYPE={3}@ENDTYPE;@VALU={4}@ENDVALU;@PRMT={5}@ENDPRMT;@ENDPROP;', "&_
		" '{1}','<none>','')"
		
dim COMM_SQL_DGMSBYSTEREO : COMM_SQL_DGMSBYSTEREO = _
  " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , d.name " _
+ " , d.ea_guid " _
+ " from ((((((t_diagram d  ) " _
+ " inner join t_package pck0 on d.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where d.StyleEx like '"+xWCx+"MDGDgm=TFCS::{0}"+xWCx+"' " _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", d.name"
dim COMM_SQL_ELTSBYSTEREO_AND_TAG : COMM_SQL_ELTSBYSTEREO_AND_TAG = _
 " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , tv.value " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o inner join t_objectproperties tv on tv.object_id = o.object_id  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"(o.Stereotype) = "+xUCASEx+"('{0}') " _
+ " 	and "+xUCASEx+"(tv.property) = "+xUCASEx+"('{1}') and " _
+xUCASEx+"('{2}') like '"+xWCx+"'+"+xUCASEx+"(tv.value)+'"+xWCx+"' and tv.value is not null" _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", tv.value, o.name"
dim COMM_SQL_ELTSBYSTEREO : COMM_SQL_ELTSBYSTEREO = _
 " select "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name")))) +" "+"as"+" model " _
+ " , o.name " _
+ " , o.ea_guid " _
+ " from ((((((t_object o  ) " _
+ " inner join t_package pck0 on o.package_id = pck0.package_id) " _
+ " left join t_package pck1 on pck1.package_id = pck0.parent_id) " _
+ " left join t_package pck2 on pck2.package_id = pck1.parent_id) " _
+ " left join t_package pck3 on pck3.package_id = pck2.parent_id) " _
+ " left join t_package pck4 on pck4.package_id = pck3.parent_id) " _
+ " where "+xUCASEx+"('{0}') like '"+xWCx+"'+"+xUCASEx+"(o.Stereotype)+'"+xWCx+"' and o.Stereotype is not null and o.object_id <> {1}" _
+ " order by "+xIfNullx("pck4.name",xIfNullx("pck3.name",xIfNullx("pck2.name", _
	xIfNullx("pck1.name","pck0.name"))))+", o.name"
dim COMM_SQL_GETMODELS : COMM_SQL_GETMODELS = "select name from t_package where parent_id = 0 and name <> 'TFCS' order by name"

'----------------------------------------------------------------------------------------------------------------------
' Module containing all texts used throughout TFCS -that are visible to the enduser- 
' Texts are grouped on the referencing module and prefixed with a module identifier to prevent name clashes.
'
' NOTE: some texts are/can be referenced by several modules (like eg workspace name), 
' this is indicated by a the prefix GEN with double underscore
'----------------------------------------------------------------------------------------------------------------------

' =============================================================================
' TFCS_ModelValidation
' =============================================================================
const VAL_NO_RELATIONS_ALLOWED = "Dit element mag geen enkele relatie met andere elementen hebben. Leg de relatie op een andere manier."
const VAL_ACT_ON_DGM = "Mag op geen enkel diagram voorkomen. Verwijder deze (als deze onderdeel vormt van een workflow: plaats deze vervolgens als stap (scherm/complex of subflow)."
const VAL_ISSUE_NOT_REALISED = "Issue is nergens aan gerelateerd. Koppel deze aan het(de) modelelement(en) waarop deze betrekking heeft."
const VAL_REQ_NOT_REALISED = "Requirement is niet gerealiseerd. Koppel de model element(en) die in deze requirement voorzien." 
const VAL_UNKNOWN_STEREOTYPE = "Dit stereotype wordt nog niet gevalideerd: {0}. Neem contact op met de beheerder van TFCS."
const VAL_ACTOR_UNUSED = "Actor is bij geen enkele workflow betrokken. Koppel de actor aan ten minste EEN workflow."
const VAL_ELT_NOT_USED = "Domein instance wordt niet gebruikt. Neem deze op in een workflow of workflow definitie en koppel deze."
const VAL_ELT_NOT_ON_DIAGRAM = "Het element is niet opgenomen in een diagram van type {0}."
const VAL_WF_NOT_ON_UCDEFDGM = "Workflow is in geen enkele workflow specificatie opgenomen ({0})."
const VAL_WF_NOT_ON_UCDGM = "Workflow is in geen enkel workflow overzicht opgenomen ({0})."
const VAL_ACTOR_NOT_ON_UCDEFDGM = "Actor is in geen enkele workflow specificatie opgenomen ({0})."
const VAL_ACTOR_NOT_ON_UCDGM = "Actor is in geen enkel workflow overzicht opgenomen ({0})."
const VAL_MULTIPLE_STEREOTYPES = "Dit element heeft meerdere stereotypen ({0}), dit is niet toegestaan. Zorg ervoor dat het element een enkel stereotype heeft."
const VAL_ELT_NOT_PART_OF_FLOW = "Element maakt geen deel uit van een workflow. Neem het element in een workflow op."
const VAL_COMP_IN_COMP = "Opgenomen in een diagram van een ander scherm of component. Een component of scherm mag zelf geen verdere verdiepingen bevatten."
const VAL_WF_ISON_DIAGRAM = "Dit element mag niet in een diagram worden opgenomen. Vervang deze door een bijbehorende stap (workflow)."
const VAL_MISSING_WFDEFN_DIAGRAM = "Dit element moet precies 1 diagram bevatten en dit moet een workflowdefinitie diagram zijn."
const VAL_MISSING_WF_DIAGRAM = "Dit element moet precies 1 diagram bevatten en dit moet een workflowrealisatie diagram zijn."
const VAL_DOMRULE_NOT_REALISED = "Domeinregel is aan geen enkel domeinobject gerelateerd."
const VAL_ELT_ON_INVALID_DGM = "Element bevind zich op een diagram waar dit niet thuis hoort "
const VAL_INVALID_SUBFLOW = "Een workflow mag alleen subflows van eenzelfde of lager niveau bevatten, dus bv een werkinstructie mag geen bedrijfsproces als stap bevatten."
const VAL_WF_IS_NOT_USED = "Deze workflow wordt niet gebruikt. Als deze workflow het hoogste niveau is dan zal dit kloppen, neem anders de workflow als subflow op binnen een andere workflow."
const VAL_COMP_IS_NOT_USED = "Deze component wordt niet gebruikt. Neem  de component op als stap in een of meer workflows."
const VAL_AI_IS_NOT_USED = "Dit autorisatieitem is nog niet gebruikt. Koppel deze aan de te autoriseren handelingen/gegevens."
const VAL_WFTYPETAG_MISSING = "Tag 'WorkflowType' ontbreekt of heeft een ongeldige waarde (waarde moet zijn een van {0})"
const VAL_WFTYPETAG_DIFFERS = "Niveau van de stap wijkt af van dat van de subflow (WorkflowType is {0} ipv {1}). Verwijder de stap en plaats deze opnieuw."
const VAL_WF_MISSING_UCELT = "De naam van dit element moet gelijk zijn aan de naam van de use case ({0})"
const VAL_INVALID_WF_EXTENSION = "De workflow mag alleen extenden van een workflow van hetzelfde niveau ({0})"
const VAL_REVERSED_CONNECTOR = "Een relatie van type 'Destination -> Source' is niet toegestaan. Verwijder de relatie en leg deze opnieuw."
const VAL_PROGRAM_FAILURE = "Er is een fout opgetreden in de validatie. Neem contact op met de beheerder van TFCS (fout in {0})."
const VAL_RELATION_NOT_VALID = "Deze relatie is hier niet toegestaan ({0} van {1}({2}) -> {3}({4}))."
const VAL_RELATIONSTEREO_NOT_VALID = "Stereotype van deze relatie is niet toegestaan {5}({0}) van {1}({2}) -> {3}({4})). Verwijder de relatie en leg deze opnieuw."
const VAL_WF_ACT_NAMES_NOT_SAME = "De naam van de workflow volgt niet de standaard. Controleer de naamgeving van de elementen in de projectbrowser bij deze workflow."
const VAL_UC_MISSING_FOR_WF = "Het UC element ontbreekt of heeft niet dezelfde naam als de activity."
const VAL_SUBLOWS_NOT_ALLOWED = "Een stap van type subflow is hier niet toegestaan."
const VAL_WFSTEP_INVALID_IN_WORKFLOW = "Een stap van type '{0}' mag niet zijn opgenomen in een workflow van een type {1}."
const VAL_WFSTEP_INVALID_IN_COMPONENT = "Een subflow mag alleen worden opgenomen in een andere workflow en niet in een scherm of component."
const VAL_NO_CLASSIFIERINST_ON_FLOWDEFDGM = "Het domeinobject ontbreekt nog in de definitie van de workflow. Voeg deze daar nog toe."
const VAL_NO_CLASSIFIER_ON_FLOWDEFDGM = "Het bijbehorende autorisatieitem ontbreekt nog in de definitie van de workflow. Voeg deze daar nog toe."
const VAL_INFO_ADDED_AI_TO_WFDEFN = "Autorisatie '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_REQ_TO_WFDEFN = "Requirement '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_ELT_TO_WFDEFN = "Impliciet gerelateerd element '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_DO_TO_WFDEFN = "Domeinobject '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_DGM_INVALID_PARENT = "Plaats het diagram onder een element van een type '{0}'."
const VAL_INFO_ADDED_RELATED_TO_WFDEFN = "Aan de workflow gerelateerd element '{0}' toegevoegd aan het workflow definitie diagram."
const VAL_INFO_ADDED_WF_TO_WFDEFN = "Subflow '{0}' is ook toegevoegd aan het workflow definitie diagram."
const VAL_ACTION_MISSING_CLASSIFIER = "De workflow waarop deze stap is gebaseerd is verwijderd uit het model. Verwijder ook deze stap."
const VAL_COMP_MISSING_CLASSIFIER = "De component of het scherm waarop deze stap is gebaseerd is verwijderd uit het model. Verwijder ook deze stap."
const VAL_AUT_MISSING_CLASSIFIER = "De autorisatie wat dit effect heeft is verwijderd uit het model. Verwijder ook dit effect."
const VAL_DOMAIN_MISSING_CLASSIFIER = "Het domeinobject is verwijderd uit het model. Verwijder deze ook hier."
const VAL_NON_TFCS_ELEMENT = "Dit element mag niet gebruikt worden binnen TFCS. Als het niet gebruikt wordt verwijder het dan, anders vervang dit door een modelelement uit TFCS."
const VAL_NO_RELATIONS_ALLOWED_OFTYPE = "Dit element mag geen relatie met andere elementen hebben van type {0}. Leg de relatie op een andere manier."
const VAL_ELT_ON_OTHER_DIAGRAM = "Dit element is (ook) opgenomen op een ander diagram. Zorg ervoor dat dit element alleen is opgenomen in het diagram waarbij deze in de project browser is vastgelegd."
const VAL_MISSING_INCLUDES_EXTENDS ="Leg een include of extend relatie van '{1}' naar '{0}' of verwijder '{0}' van het diagram."
const VAL_COMP_ON_COMPDGM = "Een complexe stap mag alleen binnen een diagram van een workflow worden opgenomen. Verwijder de stap of neem het diagram over bij een workflow."

' =============================================================================
' Menu items
' =============================================================================
const DOCGEN_OUTPUT_LOCATION = "Selecteer de map voor de output bestanden."

const MNU_GENERATE_WFSPEC = "Genereer workflow specificatie"
const MNU_GENERATECONTEXTRTF = "Genereer context document"

' =============================================================================
' TFCS_Commons
' =============================================================================
const COMM_NEW_WORKFLOW = "Nieuwe workflow"
dim COMM_WORKSPACE_MISSING: COMM_WORKSPACE_MISSING = _
	"Kon de workspace van de gebruiker niet vinden:"+vbCRLF+vbCRLF+"     {0}"+vbCRLF+vbCRLF+"Maak deze eerst aan"+vbCRLF

' =============================================================================
' TFCS_CreateFromToolbox/TFCS_CreateFromProjectBrowser
' =============================================================================
' TFCS elementtype not allowed on TFCS diagram
const DDH_TITLE_NOTALL = "TFCS Model validatie"
dim DDH_PROMPT_USE_TOOLBOX : DDH_PROMPT_USE_TOOLBOX = "Dit soort elementen kunnen alleen via de"+ _
	vbCRLF+" toolbox op dit diagram worden opgenomen"
dim DDH_PROMT_NOTALL : DDH_PROMT_NOTALL = "Dit element is niet toegestaan"+vbCRLF+"op {0} diagram"
dim DDH_PROMPT_PBCR_NOTALLOWED : DDH_PROMPT_PBCR_NOTALLOWED = _
	"Modelelementen mogen alleen via de toolbox"+vbCRLF+"bij een diagram worden aangemaakt."
const DDH_NOTALL_FLOWDEFDGM = "een workflow definitie"
const DDH_NOTALL_GENERICTYPE = "dit type"
const DDH_NOTALL_FLOWSDGM = "een workflow overzicht"
const DDH_NOTALL_FLOWDGM = "een workflow realisatie"
const DDH_NOTALL_DOMAINDGM = "een domein"
const DDH_NOTALL_REQDGM = "een requirements"
const DDH_NOTALL_MNTDGM = "een beheer"

' TFCS element already present in diagram
dim DDH_PROMPT_ELTONDGM : DDH_PROMPT_ELTONDGM = "Dit element is al opgenomen op dit diagram"+vbCRLF+"U kunt dit element maar 1x opnemen"
const DDH_TITLE_ELTONDGM = "TFCS Model validatie"

'----------------------------------------------------------------------------------------------------------------------
' Module containing general utility methods.
' 
' This module contains no event handlers only supporting functions, so registration with EAST is indirect, through
' inclusion within other modules
'
'----------------------------------------------------------------------------------------------------------------------

' Retrieves the named element from the user temp package (userdir.temp)
' If the user temp package does not yet exist, its created.
' If the temp element does not yet exist, its created (always type 'Class') including the note as explanation.
function GetTempElement(name,notes)
	dim pck: set pck = EAST.GetPackageByFQN(GEN__WORKSPACE+"."+EAST.UserName()+".temp",true)
	on error resume next
	dim elt: set elt = pck.Elements.GetByName(name)
	if elt is nothing then
		set elt = pck.Elements.AddNew("","Class")
		elt.name = name
		elt.Notes = notes
		elt.Update()
	end if
	set GetTempElement = elt
end function

function GetPrivatePackage(model,name)
	set GetPrivatePackage = nothing
	
 	' Get the private workspace for the current user
	dim workspacePath: workspacePath = GEN__WORKSPACE+"."+EAST.UserName()
	Dim workspace : 
	on error resume next
	set workspace = EAST.GetPackageByFQN(workspacePath) 
	if err.number <> 0 then
		EAST.MsgBox EAST.StrRep(MSG_WORKSPACE_MISSING,workspacePath),16,COMM_NEW_WORKFLOW
		exit function
	end if
	on error goto 0

	' Get the package (create if not available)
	if(name <> "") then
		name = "."+name
	end if
	if model = GEN__WORKSPACE then
		' No model selected: drop in private workspace root
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+name, true)
	else
		set GetPrivatePackage = EAST.GetPackageByFQN(workspacePath+"."+model+name, true) 
	end if

end function

' Add an action for the supplied workflow activity to the diagram at the indicated position
' Returns the action element that was created

'-----------------------------------------------------------------------------------
' Generic diagram & element 
'-----------------------------------------------------------------------------------

' Tree selection dialog - all elements in repository, current model is default open Returns GUID of selected dgm
function SelectDiagramFromTree(title,stereotype,stereotypeName,modelDefault,allowNew)
	SelectDiagramFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_DGMSBYSTEREO,ucase(stereotype))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectDiagramFromTree: "+dict.item("RESULT"))
	SelectDiagramFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository, current model is default open. Returns GUID of selected elt
function SelectElementFromTree(title,stereotype,stereotypeName,modelDefault,allowNew,hideElement)
	SelectElementFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim hideID: hideID = 0
	if not hideElement is nothing then
		hideID = hideElement.ElementID
	end if
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO,stereotype&"|"&hideID)	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	if(allowNew) then
		dict.add "ALLOWNEW",stereotypeName
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementFromTree: "+dict.item("RESULT"))
	SelectElementFromTree = dict.item("RESULT")
end function

' Tree selection dialog - all elements in repository with specific tag values, default tag open .Returns GUID of selected elt
function SelectElementTagFromTree(title,stereotype,tagName,tagValues,modelDefault,tagDefault,allowNew)
	SelectElementTagFromTree = ""

	' Data to pass to the dialog
	dim dict : set dict = CreateObject("Scripting.Dictionary")
	dim rows : set rows = EAST.ExecuteSQL(COMM_SQL_ELTSBYSTEREO_AND_TAG,stereotype+"|"+tagName+"|"+ucase(tagValues))	
	dim rootModels : set rootModels = EAST.ExecuteSQL(COMM_SQL_GETMODELS,"")	
	dict.add "DFLT_MDL",modelDefault 
	dict.add "DFLT_TAG",tagDefault
	if allowNew then
		dict.add "ALLOWNEW",tagValues
	end if
	dict.add "ROWS",rows
	dict.add "MODELS", rootModels
	
	EAST.OpenDialog "tfcsSelectTree.html",title,dict
	EAST.LogDebug("SelectElementTagFromTree: "+dict.item("RESULT"))
	SelectElementTagFromTree = dict.item("RESULT")
end function


' Returns true if an object is present on a specific diagram
function ObjectIsOnDiagram(objID,dgm)
	ObjectIsOnDiagram = false
	Dim dgmObject : 
	for each dgmObject in dgm.DiagramObjects
		if dgmObject.ElementID = objID then
			ObjectIsOnDiagram = true
			exit function
		end if
	next
end function

' Add an element as link to the diagram, return the created diagram object
function addEltToDiagram(elt, dgm, left, top)
	EAST.LogStart("addEltToDiagram")
	dim width: width = 20
	dim height: height = 30
	' TBD: Why is _sizeX/Y not working?
	select case elt.Type
	case "Issue"
		width = 200
	case "Requirement"
		width = 200
	case "Object"
		width = 150
		height = 50
	case "Class"
		width = 200
		height = 100
	case "Decision"
		width = 26
		height = 34
	case "MergeNode"
		width = 26
		height = 34
	case "Actor"
		width = 40
		height = 60
	case "UseCase"
		width = 100
		height = 70
	case "Activity"
		width = 80
		height = 60
	case "Action"
		width = 100
		if(elt.Stereotype = "TFCS_CompositeAction") then
			height = 60
		else
			height = 30
		end if
	case else
	end select
	dim right: right = left + width
	dim bottom: bottom = top + height
	dim dgmObject: set dgmObject = dgm.diagramObjects.AddNew("l="&left&";r="&right&";t="&top&";b="&bottom&";", "" )
	dgm.DiagramObjects.Refresh()
	dgmObject.ElementID = elt.ElementID 
	dgmObject.Update()

	set addEltToDiagram = dgmObject
	EAST.LogInfo("Added element to '"&dgm.name&"' at ("&left&","&top&")-("&right&","&bottom&")")
	EAST.LogEnd("addEltToDiagram")
end function

' Adds a post-it to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
function addPostIt(elt,dgm,loc,notes)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Note")
	dgmElement.Notes = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "BCol=65535;NSL=0"
	dgmObject.Update()
	
	set addPostIt = dgmObject
end function

' Adds a boundary to a diagram
' loc has the format: "l=10;t=10;r=800;b=100;" (#pixels left-top-right-bottom)
' nonSelectable: 1: niet selecteerbaar, 0: wel
function addBoundary(elt,dgm,loc,notes,nonSelectable)

	Dim dgmElement : 
	Dim dgmObject : 
	
	set dgmElement = elt.Elements.AddNew("","Boundary")
	dgmElement.Name = notes
	dgmElement.Update()
	
	set dgmObject = dgm.diagramObjects.AddNew(loc,"")
	dgmObject.ElementID = dgmElement.ElementID
	dgmObject.Style = "font=Arial;fontsz=100;bold=1;italic=0;ul=0;charset=0;pitch=34;NSL="&nonSelectable
	dgmObject.Update()
	
	set addBoundary = dgmObject
end function

Function GetStyleEx(byref dgm, srch)
	GetStyleEx = ""
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos > 0 Then
        Dim ePos: ePos = InStr(sPos, style, ";")
        GetStyleEx = Mid(style, sPos+len(srch)+1, ePos-sPos-len(srch)-1)
    End If
End Function

sub SetStyleEx(byref dgm, srch, value)
	
	Dim style: style = dgm.StyleEx
    Dim sPos: sPos = InStr(1, style, srch+"=")
    If sPos = 0 Then
		style = style+srch+"="+value+";"
	else
	    Dim ePos: ePos = InStr(sPos, style, ";")
		style = Left(style,sPos+len(srch)+1)+value+Mid(style, ePos)
	end if
	dgm.StyleEx = style
	dgm.update()
End sub

Function GetTagByName(tags, name)

	Dim i
	Dim tag : 
	Set tag = Nothing
	If Not tags Is Nothing Then
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				Set tag = tags.GetAt(i)
				Exit For
			End If
		Next
	End If
	Set GetTagByName = tag

End Function

Function GetTagValByName(tags, name)

	Dim ret
	ret = ""

	If Not tags Is Nothing Then
		Dim i
		Dim tag : 
'		Set tag = tags.GetByName(name)
		For i = 0 To tags.Count - 1
			If tags.GetAt(i).Name = name Then
				ret = tags.GetAt(i).Value
				Exit For
			End If
		Next
	End If

	GetTagValByName = ret

End Function


Sub SetTagValByName(tags, name, val, notes)

	If Not tags Is Nothing And Len(name) > 0 Then
		Dim tag : 
'		Set tag = tags.GetByName(name)
		Set tag = GetTagByName(tags, name)
		If Not tag Is Nothing Then
			tag.Value = val
			tag.Notes = notes
			tag.Update
			tags.Refresh
		Else
			Set tag = tags.AddNew(name, val)
			tag.notes = notes
			tag.Update
			tags.Refresh
		End If
	End If

End Sub

function GetElementByName(eltList,name)
	set GetElementByName = nothing
	
	dim elt
	for each elt in eltList
		if elt.name = name then 
			set GetElementByName = elt
			exit function
		end if
	next
end function

' Adds a property to an element
' Carefull: no check if the property already exists!
sub AddProperty(eltGUID,pName,pType,pValue,pComment)
	dim props: set props = EAST.ExecuteSQL(SQL_GET_OBJECTPROPERTIES,eltGUID)
	if props is nothing or props.count = 0  then
		' create the very first property in the set
		EAST.logerror(EAST.GenerateGUID())
		dim SQL: SQL = EAST.StrRep(SQL_INS_OBJECTPROPERTIES, _
			EAST.GenerateGUID()+"|"+eltGUID+"|"+pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(SQL)
		EAST.logerror(SQL)
	else
		dim ID : ID = props.item(0).item("XREFID")
		dim DESC : DESC = props.item(0).item("DESCRIPTION")
		DESC = DESC + EAST.StrRep("@PROP=@NAME={0}@ENDNAME;@TYPE={1}@ENDTYPE;@VALU={2}@ENDVALU;@PRMT={3}@ENDPRMT;@ENDPROP;", _
			pName+"|"+pType+"|"+pValue+"|"+pComment )
		Repository.Execute(EAST.StrRep(SQL_UPD_OBJECTPROPERTIES, ID+"|"+DESC)) 
	end if
end sub

' Remove an element from the model
sub DeleteElementFromModel(elt)		
	dim elements, i
	if elt.ParentID = 0 then
		set elements = GetPackageByID(elt.PackageID).elements
	else 
		set elements = GetElementByID(elt.ParentID).elements
	end if

	for i = 0 to elements.Count - 1
		if elements.GetAt(i).ElementID = elt.ElementID then
			elements.DeleteAt i, false
			Elements.Refresh()
			EAST.LogInfo("Deleted "&elt.ElementID)
			exit sub
		end if
	next
end sub

' =================================================================================================
' SQL statements used for model validation
' =================================================================================================
' Check if a relation exists
dim VAL_SQL_ELT_REFERENCES_ELT : VAL_SQL_ELT_REFERENCES_ELT = _
 " select count(*) as RESULT" + _
 " from (( t_object oFrom inner join t_connector conn on oFrom.object_id = conn.start_object_id)" + _
 " 			inner  join t_object  oTo on oTo.object_id = conn.end_object_id)" + _
 " where oFrom.object_id = {0} " + _
 " 		and (conn.connector_type = {1} or {1}='')" + _
 " 		and (conn.subtype = {2} or {2}='')" + _
 "		and oTo.object_id = {3}"
 
' Get all references to objects of a specific type, by a specific relationtype
dim VAL_SQL_ELT_REFERENCES : VAL_SQL_ELT_REFERENCES = _
 " select oTo.object_id as ID" + _
 " from (( t_object oFrom inner join t_connector conn on oFrom.object_id = conn.start_object_id)" + _
 " 			inner  join t_object  oTo on oTo.object_id = conn.end_object_id)" + _
 " where oFrom.object_id = {0} " + _
 " 		and ("+xUCASEx+"({1}) like '"+xWCx+"'+"+xUCASEx+"(conn.connector_type)+'"+xWCx+"' or {1} = '')" + _
 "		and ("+xUCASEx+"({2}) like '"+xWCx+"'+"+xUCASEx+"(oTo.Stereotype)+'"+xWCx+"' or {2} = '')"
 
' Get all objects of a specific type referencing this object, by a specific relationtype
dim VAL_SQL_ELT_REFERENCED_BY : VAL_SQL_ELT_REFERENCED_BY = _
 " select oFrom.object_id as ID" + _
 " from (( t_object oFrom inner join t_connector conn on oFrom.object_id = conn.start_object_id)" + _
 " 			inner  join t_object  oTo on oTo.object_id = conn.end_object_id)" + _
 " where oTo.object_id = {0} " + _
 " 		and ("+xUCASEx+"({1}) like '"+xWCx+"'+"+xUCASEx+"(conn.connector_type)+'"+xWCx+"' or {1} = '')" + _
 "		and ("+xUCASEx+"({2}) like '"+xWCx+"'+"+xUCASEx+"(oFrom.Stereotype)+'"+xWCx+"' or {2} = '')"

' Counts all relations to/from an element
 dim VAL_SQL_RELATIONS_FOR_ELT: VAL_SQL_RELATIONS_FOR_ELT = _
 " select count(*) as RESULT" + _
 " from t_object o, t_connector conn where  o.object_id = {0} and (o.object_id = conn.start_object_id" + _
 " 			or o.object_id = conn.end_object_id)"  + _
 "          and ("+xUCASEx+"({1}) like '"+xWCx+"'+"+xUCASEx+"(conn.connector_type)+'"+xWCx+"' or {1} = '')"

' Counts the number of diagrams the element is on, -limitied to- a list of specific TFCS diagram stereotypes.
dim VAL_SQL_CNT_DGMS_WITH_ELT : VAL_SQL_CNT_DGMS_WITH_ELT = _
 " select count(*) as RESULT" + _
 " from t_diagramobjects do" + _
 " 	,t_diagram d" + _
 " where do.diagram_id = d.diagram_id" + _
 " 	and do.object_id = {0}" + _
 "  and "+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')>0" + _
 "  and "+xUCASEx+"("+xMEMOx+xMIDx+"(d.StyleEx,"+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')+13,"+xMEMOx+xInstrx(xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')","d.StyleEx","';'")+"-"+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')-13)) in ({1})"

' Counts the number of diagrams the element is on, -excluding- a list of specific TFCS diagram stereotypes.
dim VAL_SQL_CNT_OTHER_DGMS_WITH_ELT: VAL_SQL_CNT_OTHER_DGMS_WITH_ELT = _
 " select count(*) as RESULT" + _
 " from t_diagramobjects do" + _
 " 	,t_diagram d" + _
 " where do.diagram_id = d.diagram_id" + _
 " 	and do.object_id = {0}" + _
 "  and "+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')>0" + _
 "  and "+xUCASEx+"("+xMEMOx+xMIDx+"(d.StyleEx,"+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')+13,"+xMEMOx+xInstrx(xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')","d.StyleEx","';'")+"-"+xMEMOx+"instr(d.StyleEx,'MDGDgm=TFCS::')-13)) not in ({1})"
 
 ' Check if an element is included in any other diagram than the one below its parent
' (note: check if parent has only one diagram is done elsewhere)
dim VAL_SQL_CNT_OTHER_DIAGRAMS_FOR_ELT : VAL_SQL_CNT_OTHER_DIAGRAMS_FOR_ELT = _
 " select count(*) as RESULT" + _
 " from t_object o, t_diagramobjects do" + _
 " 	,t_diagram d" + _
 " where o.object_id = do.object_id and do.diagram_id = d.diagram_id" + _
 "  and d.parentid <> o.parentid " + _
 " 	and o.object_id = {0}" 

 ' Does a composite element contain elements of a specific type in one of its composite diagrams?
dim VAL_SQL_COMPOSITE_CONTAINS : VAL_SQL_COMPOSITE_CONTAINS = _
 "  select count(*) as RESULT" + _
 "  from t_diagram d" + _
 " 		,t_diagramobjects do" + _
 "  	,t_object o" + _
  "  where do.diagram_id = d.diagram_id" + _
 " 		and do.object_id = o.object_id" + _
 " 		and d.parentid = {0}" + _
 " 		and ("+xUCASEx+"({1}) like '"+xWCx+"'+"+xUCASEx+"(o.stereotype)+'"+xWCx+"' or {1} = '')"
 
 ' Element contained on a diagram for a GUI or component element
 dim VAL_SQL_CONTAINED_IN_COMP : VAL_SQL_CONTAINED_IN_COMP = _
 "  select count(*) as RESULT" + _
 "  from t_diagram d" + _
 " 		,t_diagramobjects do" + _
 "  	,t_object o" + _
 " 		,t_object p" + _
 "  where o.object_id = {0}" + _
 " 		and do.object_id = o.object_id" + _
 " 		and do.diagram_id = d.diagram_id" + _
 " 		and d.parentid = p.object_id" + _
 " 		and "+xUCASEx+"(p.stereotype) in ('TFCS_GUI','TFCS_CompositeActivity')"
 
 ' Get stereotype of the parent of a diagram ('Package' if not an element)
 dim VAL_SQL_PARENT_STEREOTYPE : VAL_SQL_PARENT_STEREOTYPE = _
 "  select  count(*) as RESULT" + _
 " from t_diagram d, t_object o" + _
 " where d.parentID = o.object_id" + _
 " and d.diagram_id = {0} and o.stereotype not in ({1})"
 
' Element has exactly one diagram, and this is of the specified type
const VAL_SQL_DGMSTEREO_FOR_ELT = "select d.StyleEx from t_diagram d where d.parentid = {0}" 

' Get the elements that have an element as classifier
const VAL_SQL_GET_AS_CLASSIFIER = "select o.object_ID from t_object o where o.classifier = {0}"

' Returns the sublow actions for a workflow of a specific workflow type
' IN: object ID of the TFCS_Workflow element
' OUT: list of action ID's on the flowdiagram for the requested subflowtypees
dim VAL_SQL_SUBFLOWS_OFTYPE : VAL_SQL_SUBFLOWS_OFTYPE = _
 " select o.object_ID as ID" + _
 "   from t_object p " + _
 " 		,t_diagram d " + _
 "  	,t_diagramobjects do " + _
 " 		,t_object o " + _
 " 		,t_objectproperties tv " + _
 "   where  d.parentid = {0} " + _
 " 		and "+xUCASEx+"(d.StyleEx) like '"+xWCx+"TFCS::TFCS_FLOWDIAGRAM"+xWCx+"'  " + _
 "   		and do.diagram_id = d.diagram_id  " + _
 "  		and do.object_id = o.object_id " + _
 " 		and tv.Object_ID = o.object_id " + _
 " 		and tv.property = 'WorkflowType' " + _
 " 		and tv.value in ({1})  "
 
 ' Select all workflow defs (UC eltements) on a diagram
 dim VAL_SQL_WFS_ON_UCDEF : VAL_SQL_WFS_ON_UCDEF = _
 "  select o.object_ID as ID" + _
 "     from t_diagram d " + _
 " 		,t_diagramobjects do " + _
 "   		,t_object o " + _
 "     where  d.diagram_id = {0}" + _
 "    		and do.diagram_id = d.diagram_id  " + _
 "   		and do.object_id = o.object_id " + _
 " 		and o.stereotype = 'TFCS_Workflow'"
		
 ' All instances of a WF must have the same value for 'WorkflowType' as the WF itself
 dim VAL_SQL_CHECK_INST_HASSAMETAG : VAL_SQL_CHECK_INST_HASSAMETAG = _
 " select tv.value" + _
 "   from t_object o, t_objectproperties tv " + _
 "   where  o.classifier = {0}"  + _
 "   	and o.object_id = tv.object_id "  + _
 " 		and "+xUCASEx+"(tv.property) = "+xUCASEx+"('{1}') " + _
 " 		and tv.value in ({2})  "

dim VAL_SQL_CNT_WF_OFTYPE : VAL_SQL_CNT_WF_OFTYPE = _
 " select count(*) as RESULT" + _
 "   from t_diagramobjects do, t_diagram d, t_objectproperties tv " + _
 "   where  do.object_id = {0} and do.diagram_id = d.diagram_id "  + _
 "   	and d.parentid = tv.object_id "  + _
 " 		and tv.property = 'WorkflowType'" + _
 " 		and tv.value in ({1})"

'Check if an element has valid tagvalue
dim VAL_SQL_HAS_TAGVALUE : VAL_SQL_HAS_TAGVALUE = _
 " select tv.value" + _
 "   from t_objectproperties tv " + _
 "   where tv.object_id = {0} "  + _
 " 		and "+xUCASEx+"(tv.property) = "+xUCASEx+"('{1}') " + _
 " 		and tv.value in ({2})  "

' Count the number of compnents that include this element as subflow
dim VAL_SQL_CNT_COMP : VAL_SQL_CNT_COMP = _
" select count(*) as RESULT" + _
 " from (t_diagramobjects do inner join t_diagram d on do.diagram_id = d.diagram_id)  " + _
 " where  do.object_id = {0} " + _
 " 	and not exists " + _
 "     (select tv.property from t_objectproperties tv  " + _
 "      where  d.parentid = tv.object_id and tv.property = 'WorkflowType' )" 


dim VAL_SQL_WF_EXTENDS_OTHERLEVEL : VAL_SQL_WF_EXTENDS_OTHERLEVEL = _
 " select count(*) as RESULT" + _
 " from ((( t_object oFrom inner join t_connector conn on oFrom.object_id = conn.start_object_id)" + _
 " 			inner  join t_object oTo on oTo.object_id = conn.end_object_id)" + _
 " 			inner  join t_objectproperties tv on oTo.object_id = tv.object_id)" + _
 " where oFrom.object_id = {0}" + _
 " 		and conn.connector_type = 'UseCase'" + _
 "		and conn.SubType = 'Extends'" + _
 "		and tv.property = 'WorkflowType'" + _
 "		and tv.value <> '{1}'"

' Get all elements of a specific stereotype used
' in a flowrealisation but have not been included in the flowdefinition
dim VAL_SQL_GET_MISSING_ELTS_ON_WFDEFN : VAL_SQL_GET_MISSING_ELTS_ON_WFDEFN = _
 "	select distinct fo.object_id" + _
 "	from t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "	where fdo.diagram_id = {0}" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.stereotype in ({2})" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo " + _
 "				where ddo.diagram_id = {1}" + _
 "					and fo.object_id = ddo.object_id) "
 
' Get all elements of a specific stereotype used -as classifiers- 
' in a flowrealisation but have not been included in the flowdefinition
dim VAL_SQL_GET_MISSING_CLASSIFIERS_ON_WFDEFN : VAL_SQL_GET_MISSING_CLASSIFIERS_ON_WFDEFN = _
 "	select distinct c.object_id " + _
 "	from t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "		,t_object c" + _
 "	where fdo.diagram_id = {0}" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.classifier = c.object_id" + _
 "		and c.stereotype in ({2})" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo " + _
 "				where ddo.diagram_id = {1}" + _
 "					and c.object_id = ddo.object_id) "

' Get all elements of a specific stereotype used -as classifier- 
' in a flowrealisation but have not been included -as classifier- in the flowdefinition
dim VAL_SQL_GET_MISSING_INST_ON_WFDEFN: VAL_SQL_GET_MISSING_INST_ON_WFDEFN = _
 "	select distinct c.object_id " + _
 "	from t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "		,t_object c" + _
 "	where fdo.diagram_id = {0}" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.classifier = c.object_id" + _
 "		and c.stereotype in ({2})" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo, t_object o " + _
 "				where ddo.diagram_id = {1} and ddo.object_id = o.object_id" + _
 "					and c.object_id = o.classifier) "

' Get all subflows on a workflow realisation that are missing on the workflow definition
dim VAL_SQL_GET_MISSING_WORKFLOWS_ON_WFDEFN : VAL_SQL_GET_MISSING_WORKFLOWS_ON_WFDEFN = _
 "	select distinct c.object_id " + _
 "	from t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "		,t_object ac" + _
 "		,t_object c" + _
 "	where fdo.diagram_id = {0}" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.classifier = ac.object_id" + _
 "		and ac.stereotype = 'TFCS_Activity'" + _
 "		and c.parentid = ac.object_id" + _
 "		and c.stereotype = 'TFCS_Workflow'" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo " + _
 "				where ddo.diagram_id = {1} " + _
 "					and c.object_id = ddo.object_id) "

' Get elements related TO workflow missing on its WF definition diagram
dim VAL_SQL_GET_MISSING_RELATIONS_TO_WF : VAL_SQL_GET_MISSING_RELATIONS_TO_WF = _
 "	select r.object_id " + _
 "	from t_diagram dd" + _
 "		,t_object uc" + _
 "		,t_connector conn" + _
 "		,t_object r" + _
 "	where dd.diagram_ID = {0} " + _
 "		and uc.parentid = dd.parentid" + _
 "		and uc.stereotype = 'TFCS_Workflow'" + _
 "		and r.stereotype <> 'TFCS_Workflow'" + _
 "		and ((uc.object_id = conn.end_object_id and r.object_id = conn.start_object_id))" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo " + _
 "				where  ddo.diagram_id = dd.diagram_id" + _
 "					and r.object_id = ddo.object_id)"
 
 ' Get elements related FROM workflow missing on its workflow definition diagram
dim VAL_SQL_GET_MISSING_RELATIONS_FROM_WF : VAL_SQL_GET_MISSING_RELATIONS_FROM_WF = _
 "	select r.object_id " + _
 "	from t_diagram dd" + _
 "		,t_object uc" + _
 "		,t_connector conn" + _
 "		,t_object r" + _
 "	where dd.diagram_ID = {0} " + _
 "		and uc.parentid = dd.parentid" + _
 "		and uc.stereotype = 'TFCS_Workflow'" + _
 "		and ((uc.object_id = conn.start_object_id and r.object_id = conn.end_object_id))" + _
 "		and dd.diagram_ID = {0}" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagramobjects ddo " + _
 "				where  ddo.diagram_id = dd.diagram_id" + _
 "					and r.object_id = ddo.object_id)"
 
 ' Get workflow elements on a workflow definition diagram not extended or included by the workflow
 dim VAL_SQL_GET_MISSING_INCLUDES_EXTENDS : VAL_SQL_GET_MISSING_INCLUDES_EXTENDS = _
" select r.object_id, uc.name as PARENTWORKFLOW" + _
 "	from t_diagram dd" + _
 "		,t_object uc" + _
 "		,t_diagramobjects ddo" + _
 "		,t_object r" + _
 "	where dd.diagram_ID = {0} " + _
 "		and uc.parentid = dd.parentid" + _
 "		and uc.stereotype = 'TFCS_Workflow'" + _
 "		and ddo.diagram_id = dd.diagram_id" + _
 " 		and ddo.object_id = r.object_id" + _
 "		and r.stereotype = 'TFCS_Workflow'" + _
 "		and not exists (" + _
 "			select Connector_ID from t_connector conn " + _
 "			where (uc.object_id = conn.start_object_id and r.object_id = conn.end_object_id)" + _
 "				and conn.stereotype in ('extend','include'))" + _
 "		and uc.object_id <> r.object_id"

 
' Checks if for an instance of a classifier placed on a workflow -realisation- diagram -the
' classifier- existsts on the corresponding workflow -definition- as well
dim VAL_SQL_CNT_CLASSIFIER_MISSING_ON_DD : VAL_SQL_CNT_CLASSIFIER_MISSING_ON_DD = _
 "	select count(*) as RESULT" + _
 "	from t_object uc" + _
 "		,t_diagram fd" + _
 "		,t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "		,t_object c" + _
 "	where uc.object_id = fd.parentID" + _
 "		and fdo.diagram_id = fd.diagram_id" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.classifier = c.object_id" + _
 "		and fo.object_id = {0}" + _
 "  	and "+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')>0" + _
 "		and "+xUCASEx+"("+xMEMOx+xMIDx+"(fd.StyleEx,"+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')+13,"+xMEMOx+xInstrx(xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')","fd.StyleEx","';'")+"-"+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')-13)) = 'TFCS_FlowDiagram'" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagram dd" + _
 "						,t_diagramobjects ddo " + _
 "				where  dd.parentid = uc.parentid " + _
 "					and ddo.diagram_id = dd.diagram_id" + _
 "					and c.object_id = ddo.object_id) "

' Checks if for an instance of a classifier placed on a workflow -realisation- diagram an -instance of the
' classifier- existsts on the corresponding workflow -definition- as well
dim VAL_SQL_CNT_CLASSIFIERINST_MISSING_ON_DD : VAL_SQL_CNT_CLASSIFIERINST_MISSING_ON_DD = _
 "	select count(*) as RESULT" + _
 "	from t_object uc" + _
 "		,t_diagram fd" + _
 "		,t_diagramobjects fdo" + _
 "		,t_object fo" + _
 "		,t_object c" + _
 "	where uc.object_id = fd.parentID" + _
 "		and fdo.diagram_id = fd.diagram_id" + _
 "		and fdo.object_id = fo.object_id" + _
 "		and fo.classifier = c.object_id" + _
 "		and fo.object_id = {0}" + _
 "  	and "+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')>0" + _
 "		and "+xUCASEx+"("+xMEMOx+xMIDx+"(fd.StyleEx,"+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')+13,"+xMEMOx+xInstrx(xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')","fd.StyleEx","';'")+"-"+xMEMOx+"instr(fd.StyleEx,'MDGDgm=TFCS::')-13)) = 'TFCS_FlowDiagram'" + _
 "		and not exists" + _
 "			(select ddo.object_id " + _
 "				from t_diagram dd" + _
 "						,t_diagramobjects ddo " + _
 "						,t_object do" + _
 "				where  dd.parentid = uc.parentid " + _
 "					and ddo.diagram_id = dd.diagram_id" + _
 "					and do.object_id = ddo.object_id" + _
 "					and do.classifier = c.object_id) "

' Checks if a diagram contains action instances of a composite activity
dim VAL_SQL_COMP_ON_COMPDGM : VAL_SQL_COMP_ON_COMPDGM = _
 "  select o.object_id" + _
 "		from t_diagramobjects ddo" + _
 "			,t_object o" + _
 "			,t_object c" + _
 "		where ddo.diagram_id = {0}" + _
 "			and o.object_id = ddo.object_id" + _
 "			and o.classifier = c.object_id" + _
 "			and c.stereotype = 'TFCS_CompositeActivity'"

'----------------------------------------------------------------------------------------------------------------------
' Executes TFCS model validations in response to project/model validation/validate selected
' NOTE: although these EA validation events are used the events are not acutally triggered directly by EA
'       as this seems to lead to instability ulitmately leading EA to crash. 
' 		To work around this EAST provides a method ValidateItem that will walk the tree of the selected element
'		and trigger the expected event. Results are displayed in a seperate output screen 'TFCS Guidance'   
'----------------------------------------------------------------------------------------------------------------------
'option explicit

'!INC TFCS_Support.TFCS_Constants
'!INC TFCS_Support.TFCS_SQL
'!INC TFCS_Support.TFCS_TEXTS
'!INC TFCS_Support.TFCS_commons
'!INC TFCS_Support.TFCS_VALSQL

const MNU_VALIDATESELECTED = "Controleer tegen TFCS regels"

' =================================================================================================
' Handlers for events of interest
' =================================================================================================
Function EA_GetMenuItems(MenuLocation, MenuName) 
	if MenuLocation = "TreeView" and MenuName = MNU_TFCSMAIN then
		EA_GetMenuItems = MNU_VALIDATESELECTED
	end if
end Function

Sub EA_MenuClick( MenuName , ItemName )
	if Menuname = MNU_TFCSMAIN and ItemName = MNU_VALIDATESELECTED then
		' This will walk the tree below the selected elementy in the project browser.
		' For each element in the tree the appropriate callback 'EA_OnRunXXXRule' is called
		' Querying EAST.CheckSevere
		EAST.ValidateItem(GetTreeSelectedObject())
	end if
end sub

' The tree is walked first to locate severe errors (CheckSevere = true), 
' next for remaining errors (CheckSevere = false). OnRunXXXRule check the value to do the
' appropriate validations.
dim CheckSevere: CheckSevere = true
Sub EA_OnStartValidation(args())
	CheckSevere = EAST.CheckSevere()
end sub

Sub EA_OnRunElementRule(RuleID,elt)
      EAST.LogInfo("****************** Validating... "+elt.name+" ("+elt.stereotype+") ********************")
      if elt.Stereotype = "" or Left(elt.Stereotype,4) <> "TFCS" then
		' non-TFCS element found    
		dim eltType : eltType = elt.Type
		if eltType = "Artifact" _
			or eltType = "Note" _
			or eltType = "Text" _
			or eltType = "Constraint" _
			or eltType = "Boundary" _
			or eltType = "Package" _
			or eltType = "UMLDiagram" Then
			' Allowed (must match the list in TFCS_CreateFromToolbox)
		else
			if (checkSevere) then
				  PublishResult 1,VAL_NON_TFCS_ELEMENT,elt,empty
			end if
		end if
      else
		select case elt.Type
			case "Issue"
				ValidateIssue(elt)
			case "Requirement"
				if elt.Stereotype = "TFCS_DomainRule" then
					ValidateDomainRule(elt)
				elseif elt.Stereotype = "TFCS_Authorisation" then
					ValidateAutorisation(elt)
				else
					ValidateRequirement(elt)
				end if
			case else
				select case elt.Stereotype
					case "TFCS_Activity"					' container for specs relating to a workflow
						ValidateActivity(elt)
					case "TFCS_GUI"							' screen defn
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ACT_ON_DGM,"''" ' template, only allowed as classifier for elements on diagrams
							CheckHasNoRelationsOfType elt,3,VAL_NO_RELATIONS_ALLOWED_OFTYPE,"'ControlFlow,ObjectFlow'"
							CheckHasExactlyOneDiagram elt,3,VAL_MISSING_WF_DIAGRAM,"TFCS_FlowDiagram" 
						else
							CheckUsedAsClassifier elt,1,VAL_COMP_IS_NOT_USED ' is the template used?
							CheckHasNoRelations elt,0,VAL_NO_RELATIONS_ALLOWED
						end if
					case "TFCS_Workflow"					' UC element for workflow, container for WF realisation
						if(CheckSevere)then
							CheckIsOnDiagram elt,3,VAL_WF_NOT_ON_UCDEFDGM,"'TFCS_FlowDefnDiagram'"
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDefnDiagram','TFCS_FlowsDiagram'"
							CheckHasTagValueIn elt,3,VAL_WFTYPETAG_MISSING,"WorkflowType","'UseCase','WerkInstructie','BedrijfsProces'"
							CheckHasExactlyOneDiagram elt,3,VAL_MISSING_WF_DIAGRAM,"TFCS_FlowDiagram"
						else
							CheckWFExtendsSameLevelWF elt,0,VAL_INVALID_WF_EXTENSION
							CheckWFIsUsed elt,1,VAL_WF_IS_NOT_USED ' is the activity acting as template for this workflow used?
							CheckIsOnDiagram elt,2,VAL_WF_NOT_ON_UCDGM,"'TFCS_FlowsDiagram'"
						end if
					case "TFCS_CompositeActivity"			' Component definition
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ACT_ON_DGM,"''" ' template, only allowed as classifier for elements on diagrams
							CheckHasNoRelations elt,3,VAL_NO_RELATIONS_ALLOWED
							CheckHasNoRelationsOfType elt,3,VAL_NO_RELATIONS_ALLOWED_OFTYPE,"'ControlFlow,ObjectFlow'"
							CheckHasExactlyOneDiagram elt,3,VAL_MISSING_WF_DIAGRAM,"TFCS_FlowDiagram"
						else
							CheckUsedAsClassifier elt,1,VAL_COMP_IS_NOT_USED ' is the template used?
						end if
					case "TFCS_Actor"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowsDiagram','TFCS_FlowDefnDiagram'"
						else
							CheckIsOnDiagram elt,1,VAL_ACTOR_NOT_ON_UCDEFDGM,"'TFCS_FlowDefnDiagram'"
							CheckIsOnDiagram elt,2,VAL_ACTOR_NOT_ON_UCDGM,"'TFCS_FlowsDiagram'"
							CheckReferences elt,1,VAL_ACTOR_UNUSED,"'UseCase'","''"
						end if
					case "TFCS_DomainObject"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_DomainDiagram'"
						else
							CheckIsOnDiagram elt,1,VAL_ELT_NOT_ON_DIAGRAM,"'TFCS_DomainDiagram'"
						end if
					case "TFCS_DomainInstance"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram','TFCS_FlowDefnDiagram'"
						else
							CheckHasClassifier elt,3,VAL_DOMAIN_MISSING_CLASSIFIER
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM,"'TFCS_FlowDiagram','TFCS_FlowDefnDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_USED,"'ControlFlow,ObjectFlow,Dependency'","''"
							CheckClassifierInstanceIsOnWFDefDiagram  elt,0,VAL_NO_CLASSIFIERINST_ON_FLOWDEFDGM ' note: reverse is not required
						end if
					case "TFCS_AuthorisationEffect"
						if(CheckSevere)then
							CheckHasClassifier elt,3,VAL_AUT_MISSING_CLASSIFIER
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram','TFCS_FlowDefnDiagram'"
							CheckHasNoRelationsOfType elt,3,VAL_NO_RELATIONS_ALLOWED_OFTYPE,"'ControlFlow,ObjectFlow'"
						else
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_Action"
						if(CheckSevere)then
							CheckHasClassifier elt,3,VAL_ACTION_MISSING_CLASSIFIER
							CheckHasTagValueIn elt,3,VAL_WFTYPETAG_MISSING,"WorkflowType","'UseCase','WerkInstructie','BedrijfsProces'"
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
							CheckWFStepNotInLowerWorkflow elt,3,VAL_WFSTEP_INVALID_IN_WORKFLOW
							CheckWFStepNotInComponent elt,3,VAL_WFSTEP_INVALID_IN_COMPONENT
						else
							CheckElementOnlyUsedOnParent(elt)
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckActionTagSameAsWF elt
						end if
					case "TFCS_AtomicAction"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_CompositeAction"
						if(CheckSevere)then
							CheckHasClassifier elt,3,VAL_COMP_MISSING_CLASSIFIER
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_ActivityInitial"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckReferences elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_ActivityFinal"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckReferencedBy elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_Decision"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_MergeNode"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_Event"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckReferences elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case "TFCS_IntermediateResult"
						if(CheckSevere)then
							CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM, "'TFCS_FlowDiagram'"
						else
							CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM, "'TFCS_FlowDiagram'"
							CheckHasRelation elt,1,VAL_ELT_NOT_PART_OF_FLOW,"'ControlFlow,ObjectFlow'","''"
							CheckElementOnlyUsedOnParent(elt)
						end if
					case else
						' Stereotype missing in model validation!	
						PublishResult 3,EAST.StrRep(VAL_UNKNOWN_STEREOTYPE,elt.stereotype),elt,empty
				end select
		end select
	end if
end sub

Sub EA_OnRunDiagramRule(RuleID,DiagramID)
' - check for allowed elements are allowed elements
' - ucdef: includes must match the subflow actions on real dgm
' - ucdef: actors must match the actual related actors
	Dim dgm : 
	set dgm = GetDiagramByID(DiagramID)
	dim dgmStereo: dgmStereo = GetStyleEx(dgm,"MDGDgm") 
	if dgmStereo = "" or Left(dgmStereo,4) <> "TFCS" then 
		' non-TFCS => not interested
		exit sub 
	end if
	
	EAST.LogInfo("****************** Validating... "+dgm.name+" ("+dgmStereo+") ********************")
	select case dgmStereo
		case "TFCS::TFCS_FlowDiagram"
			if(CheckSevere)then
				CheckDiagramHasParent dgm,"'TFCS_Workflow','TFCS_GUI','TFCS_CompositeActivity'"
				
				' not a rule but automatic synhronisation of flowdefinition dgm with flow realisation dgm
				SynchronizeWFDefWithFlow(dgm)
				CheckCompositeIncludesNoComposite 3,dgm
			else
				'
			end if
		case "TFCS::TFCS_FlowDefnDiagram"
			if(CheckSevere)then
				CheckDiagramHasParent dgm,"'TFCS_Activity'"

				' not a rule but automatic synhronisation of flowdefinition dgm with missing model relations
				SynchronizeWFDefWithModel(dgm)
			else
				CheckParentWorkflowIncludesOrExtendsOthers 0,dgm
			end if
	end select
end sub


Sub EA_OnRunConnectorRule(RuleID,ConnectorID)
     EAST.LogInfo("****************** Validating connector... ********************")
	
	Dim conn : 
	Dim eltFrom : 
	Dim eltTo : 

	set conn = GetConnectorByID(ConnectorID)
	set eltFrom = GetElementByID(conn.ClientID)
	set eltTo = GetElementByID(conn.SupplierID)
	if Left(eltFrom.Stereotype,4) <> "TFCS" or Left(eltTo.Stereotype,4) <> "TFCS" then
		' We only check 'pure TFCS' relations: between TFCS model elements
		exit sub
	end if

	if(CheckSevere)then
		if conn.Direction = "Destination -> Source" then
			' Preventing reverse direction connectors makes it easier to eg traverse control/object flows
			PublishResult 3,VAL_REVERSED_CONNECTOR,conn,empty
		else
			' Check if from/to element (stereo)types are valid for the type of relation
			' NOTE: validation that required relations are present is handled by element validation
			dim fromType: fromType = eltFrom.Type
			dim toType: toType = eltTo.Type
			dim toStereo: toStereo = eltTo.Stereotype
			dim fromStereo: fromStereo = eltFrom.Stereotype
			dim subType: subType = conn.Subtype
			select case  conn.Type
				case "Dependency"
					if fromType = "Issue" then exit sub end if
					if fromStereo = "TFCS_AuthorisationEffect" then exit sub end if
					if toType = "Class" and fromStereo = "TFCS_DomainRule" then exit sub end if
					if (fromType = "UseCase" and toStereo = "TFCS_DomainInstance") _
						or (toType = "UseCase" and fromStereo = "TFCS_DomainInstance") then 
						
						' Check for valid stereotype
						if conn.Stereotype = "input" or conn.Stereotype = "create" _
							or conn.Stereotype = "update" or conn.Stereotype = "delete" or conn.Stereotype = "" then
						else
							PublishResult 3,EAST.StrRep(VAL_RELATIONSTEREO_NOT_VALID,conn.type&"|"&fromType&"|"&fromStereo&"|"&toType&"|"&toStereo&"|"&conn.Stereotype),conn,empty
						end if
						exit sub 
					end if
				case "UseCase"
					if fromType = "Actor" and toType = "UseCase" then exit sub end if
					if toType = "Actor" and fromType = "UseCase" then exit sub end if
					if toType = "UseCase" and fromType = "UseCase" then exit sub end if
				case "ControlFlow"
					if fromStereo = "TFCS_ActivityInitial" and toType = "Action" then exit sub end if
					if fromStereo = "TFCS_ActivityInitial" and toType = "Decision" then exit sub end if
					if fromType = "Action" and toType = "Decision" then exit sub end if
					if fromType = "Action" and toType = "MergeNode" then exit sub end if
					if fromType = "Action" and toStereo = "TFCS_ActivityFinal" then exit sub end if
					if fromType = "Action" and toType = "Action" then exit sub end if
					if fromType = "Decision" and toType = "MergeNode" then exit sub end if
					if fromType = "Decision" and toType = "Action" then exit sub end if
					if fromType = "Decision" and toType = "Decision" then exit sub end if
					if fromType = "Decision" and toStereo = "TFCS_ActivityFinal" then exit sub end if
					if fromType = "MergeNode" and toType = "MergeNode" then exit sub end if
					if fromType = "MergeNode" and toType = "Decision" then exit sub end if
					if fromType = "MergeNode" and toStereo = "TFCS_ActivityFinal" then exit sub end if
					if fromType = "MergeNode" and toType = "Action" then exit sub end if
					if fromType = "Event" and toType = "Action" then exit sub end if
					if fromType = "Event" and toType = "Decision" then exit sub end if
				case "ObjectFlow"
					if fromType = "Object" and fromStereo = "TFCS_DomainInstance" then exit sub end if
					if fromType = "Object" and fromStereo = "TFCS_IntermediateResult" then exit sub end if
					if toType = "Object" and toStereo = "TFCS_DomainInstance" then exit sub end if
					if toType = "Object" and toStereo = "TFCS_IntermediateResult" then exit sub end if
				case "Association"
					if toType = "Class" and fromType = "Class" then exit sub end if
				case "Generalization"
					if toType = "Class" and fromType = "Class" then exit sub end if
					if toType = "Actor" and fromType = "Actor" then exit sub end if
				case "Aggregation"
					if toType = "Class" and fromType = "Class" then exit sub end if
				case "Realisation"
					if toType = "Requirement" then exit sub end if
			end select
			PublishResult 3,EAST.StrRep(VAL_RELATION_NOT_VALID,conn.type&"|"&fromType&"|"&fromStereo&"|"&toType&"|"&toStereo),conn,empty
		end if	
	end if
end sub

Sub EA_OnRunPackageRule(RuleID,PackageID)
' - Packages no more than 3 levels deep: model - view - pck - subpck - subsubpck
end sub

' =================================================================================================
' Validation rules 
' =================================================================================================

' Validate all elements of type issue (TFCS_TBD, TFCS_ReviewComment,...)
sub ValidateIssue(elt)
	if(CheckSevere)then
		' none defined
	else
		CheckIsOnDiagram elt,1,VAL_ELT_NOT_ON_DIAGRAM, _
			"'TFCS_FlowDefnDiagram','TFCS_MaintenanceDiagram',"+ _
			"'TFCS_RequirementsDiagram','TFCS_DomainDiagram','TFCS_FlowDiagram','TFCS_FlowsDiagram'"
		CheckReferences elt,1,VAL_ISSUE_NOT_REALISED,"'Dependency'","''"
	end if
end sub

' Validate all elements of type requirement 
sub ValidateRequirement(elt)
	if(CheckSevere)then
		' none defined
	else
		CheckIsOnDiagram elt,1,VAL_ELT_NOT_ON_DIAGRAM, _
			"'TFCS_FlowDefnDiagram','TFCS_RequirementsDiagram','TFCS_DomainDiagram'"+ _
			",'TFCS_FlowDiagram','TFCS_FlowsDiagram'"
		CheckReferencedBy elt,1,VAL_REQ_NOT_REALISED,"'Realisation'","''"
	end if
end sub

sub ValidateDomainRule(elt)
	if(CheckSevere)then
		CheckIsOnlyOnDiagram elt,3,VAL_ELT_ON_INVALID_DGM,"'TFCS_DomainDiagram','TFCS_FlowDiagram'"
	else
		CheckIsOnDiagram elt,0,VAL_ELT_NOT_ON_DIAGRAM,"'TFCS_DomainDiagram','TFCS_FlowDiagram'"
		CheckReferences elt,0,VAL_DOMRULE_NOT_REALISED,"'Dependency'","'TFCS_DomainObject'"
	end if
end sub
				
sub ValidateAutorisation(elt)
	if(CheckSevere)then
		' none defined
	else
		CheckUsedAsClassifier elt,1,VAL_AI_IS_NOT_USED ' has the AI any effects?
	end if
end sub

sub ValidateActivity(elt)
	if(CheckSevere)then
' Activity must be present on flow realisation diagram of the workflow it rperesents so update rule:
'					CheckIsOnlyOnDiagram elt,3,VAL_ACT_ON_DGM,"''" ' template, only allowed as classifier for elements on diagrams
		CheckHasNoRelations elt,3,VAL_NO_RELATIONS_ALLOWED
		CheckHasExactlyOneDiagram elt,3,VAL_MISSING_WFDEFN_DIAGRAM,"TFCS_FlowDefnDiagram"
		
		' Must have a workflow element
		dim uc: set uc = GetElementByName(elt.Elements,elt.Name)
		if uc is nothing or uc.stereotype <> "TFCS_Workflow" then
			PublishResult 3,VAL_UC_MISSING_FOR_WF,elt,empty
		end if
	else
		' none defined
	end if
end sub

' Objects on diagrams should not be re-used on other diagrams
sub CheckElementOnlyUsedOnParent(elt)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_OTHER_DIAGRAMS_FOR_ELT,elt.ElementID)
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult 0,VAL_ELT_ON_OTHER_DIAGRAM,elt,empty
	end if
end sub

' Checks if an element has no relations at all
sub CheckHasNoRelations(elt,severity,msg)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_RELATIONS_FOR_ELT,elt.ElementID&"|''")
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

' Checks if an element has no relations of a specific type
sub CheckHasNoRelationsOfType(elt,severity,msg,connTypeList)
      dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_RELATIONS_FOR_ELT,elt.ElementID&"|"&connTypeList)
      if TypeName(result) = "Empty"  or CInt(result) > 0  then
            PublishResult severity,EAST.STRRep(msg,connTypeList),elt,empty
      end if
end sub

' Checks if an element has at least one relation of the specified type with elements of the specified type
sub CheckHasRelation(elt,severity,msg,connTypeList,stereoTypeList)
	dim result: set result = EAST.ExecuteSQL( _
		VAL_SQL_ELT_REFERENCEd_by,elt.ElementID&"|"&ucase(connTypeList)&"|"&ucase(stereoTypeList))
	if result is nothing then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckRelation"),elt,empty
	elseif result.count = 0  then
		set result = EAST.ExecuteSQL( _
			VAL_SQL_ELT_REFERENCES,elt.ElementID&"|"&ucase(connTypeList)&"|"&ucase(stereoTypeList))
		if result is nothing then
			PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckRelation"),elt,empty
		elseif result.count = 0  then
			PublishResult severity,msg,elt,empty
		end if
	end if
end sub

function RelationExists(eltFromID,connType,connSubType,eltToID)
	RelationExists = false
	
	dim result: result = EAST.ExecuteScalarSQL( VAL_SQL_ELT_REFERENCES_ELT, _
		eltFromID&"|"&connType&"|"&connSubType&"|"&eltToID)
	if Typename(result) <> "Empty" and CInt(result) > 1 then
		RelationExists = true
	end if
end function

' Checks if an element has a relation originating from an element with one of the specified stereotypes and relation type
sub CheckReferencedBy(ELT,severity,msg,connTypeList,stereoTypeList)
	dim result: set result = EAST.ExecuteSQL( _
		VAL_SQL_ELT_REFERENCEd_by,elt.ElementID&"|"&ucase(connTypeList)&"|"&ucase(stereoTypeList))
	if result is nothing then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckReferencedBy"),elt,empty
	elseif result.count = 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

' Checks if an element has a relation to an element with one of the specified stereotypes and relation type
sub CheckReferences(ELT,severity,msg,connTypeList,stereoTypeList)
	dim result: set result = EAST.ExecuteSQL( _
		VAL_SQL_ELT_REFERENCES,elt.ElementID&"|"&ucase(connTypeList)&"|"&ucase(stereoTypeList))
	if result is nothing then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckReferences"),elt,empty
	elseif result.count = 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

' Checks if an element is present on at least one diagram of the specified (stereo)type
' Usage: IsOnDiagram(elt,"'TFCS_FlowsDiagram'")
sub CheckIsOnDiagram(elt,severity,msg,dgmStereoTypeList)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_DGMS_WITH_ELT,elt.ElementID&"|"&ucase(dgmStereoTypeList))
	if TypeName(result) = "Empty"  or CInt(result) = 0  then
		PublishResult severity,EAST.StrRep(msg,dgmStereoTypeList),elt,empty
	end if
end sub

' Checks if an element is present on none of the diagrams of the specified (stereo)type
' Usage: IsNotOnDiagram(elt,"'TFCS_FlowsDiagram','TFCSFlowDefnDiagram'")
sub CheckIsOnlyOnDiagram(elt,severity,msg,dgmStereoTypeList)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_OTHER_DGMS_WITH_ELT,elt.ElementID&"|"&ucase(dgmStereoTypeList))
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		dim postfix: postfix = ""
		if dgmStereoTypeList <> "''" then
			postfix = " (komt voor in een of meer diagrammen van een ander type dan	"+dgmStereoTypeList+")"
		else
			postfix = ""
		end if
		PublishResult severity, msg+postfix,elt,empty
	end if
end sub

' The element is parent for exacly one diagram, and this has the provided stereotype
sub CheckHasExactlyOneDiagram(elt,severity,msg,dgmStereoType)
	dim result: set result = EAST.ExecuteSQL(VAL_SQL_DGMSTEREO_FOR_ELT,elt.ElementID)
	if (result is nothing) then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckHasExactlyOneDiagram"),elt,empty
	else
		if result.count > 1  then
			PublishResult severity,msg + " (meerdere diagrammen gevonden)",elt,empty
		elseif result.count = 0  then
			PublishResult severity,msg + " (geen diagram gevonden)",elt,empty
		else
			dim stereotype
			dim style : style = result.item(0).item("STYLEEX")
			dim srch: srch = "MDGDgm="
			Dim sPos: sPos = InStr(1, style,srch)
			If sPos > 0 Then
				Dim ePos: ePos = InStr(sPos, style, ";")
				stereotype = Mid(style, sPos+len(srch), ePos-sPos-len(srch))
			End If
			if (ucase(stereotype) <> ucase("TFCS::"+dgmStereoType)) then
				PublishResult severity,msg + " (stereotype is '"+stereotype+"' ipv '"+dgmStereoType+"')",elt,empty
			end if
		end if
	end if
end sub

' Checks if an element does not contain elements of the specified type in its 'Elements' list
sub CheckNotContains(elt,severity,msg,eltStereoTypeList)

	' Add typelist to Where clause
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_COMPOSITE_CONTAINS,elt.ElementID&"|"&ucase(eltStereoTypeList))
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,msg+"(diagram bij dit element bevat een of meer elementen van type '"+eltStereoTypeList+"'",elt,empty
	end if
end sub

' Checks if an element contains an element of the specified type in its 'Elements' list
sub CheckNotContainedInComposite(elt,severity,msg)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CONTAINED_IN_COMP,elt.ElementID)
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckWFIncludesNoHigherLevelSubflows(elt,severity,msg) 

	' Determine invalid sublow types
	dim flowType : flowType = GetTagValByName(elt.TaggedValues,"WorkflowType")
	dim disAllowedTypes : disAllowedTypes = "'WerkInstructie','BedrijfsProces'"
	select case flowType
		case "BedrijfsProces"
			exit sub
		case "WerkInstructie"
			disAllowedTypes = "'BedrijfsProces'"
	end select
	
	dim result: set result = EAST.ExecuteSQL(VAL_SQL_SUBFLOWS_OFTYPE,elt.ElementID&"|"&disAllowedTypes)
	if result is nothing  then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckWFIncludesNoHigherLevelSubflows"),elt,empty
	elseif result.count > 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckWFIsUsed(elt,severity,msg) 
	' Note we use ParentID iso ElementID as steps on workflows are classified by the UC -activity- element
	' which is the parent of the UC element if the TFCS structure for workflows has been obeyed (this is
	' validated elsewhere)
	dim result: set result = EAST.ExecuteSQL(VAL_SQL_GET_AS_CLASSIFIER,elt.ParentID)
	if result is nothing  then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckWFIsUsed"),elt,empty
	elseif result.count = 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckUsedAsClassifier(elt,severity,msg) 
	dim result: set result = EAST.ExecuteSQL(VAL_SQL_GET_AS_CLASSIFIER,elt.ElementID)
	if result is nothing  then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckUsedAsClassifier"),elt,empty
	elseif result.count = 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckTagSameAsClassifier(elt,severity,msg,tagName) 
	dim eltTag  : eltTag = GetTagValByName(elt.TaggedValues,tagName)
	dim classifierTag  : classifierTag = GetTagValByName(GetElementByID(elt.classifierID).TaggedValues,tagName)
	if eltTag <> classifierTag then
		PublishResult severity,EAST.StrRep(msg,eltTag&"|"&classifierTag),elt,empty
	end if
end sub

sub CheckActionTagSameAsWF(elt)
	dim eltTag  : eltTag = GetTagValByName(elt.TaggedValues,"WorkflowType")
	dim ucElt,actElt
'	EAST.LogError(">> "+Cstr(elt.ElementID)+"("+eltTag+") classifierID: "+CStr(elt.classifierID))
	set actElt = GetElementByID(elt.ClassifierID)
	set ucElt = actElt.Elements.GetByName(actElt.Name)
	dim ucTag  : ucTag = GetTagValByName(ucElt.TaggedValues,"WorkflowType")
	if eltTag <> ucTag then
		PublishResult 3,EAST.StrRep(VAL_WFTYPETAG_DIFFERS,eltTag&"|"&ucTag),elt,empty
	end if
end sub

sub CheckHasTagValueIn(elt,severity,msg,tagName,valueList) 
	dim result: set result = EAST.ExecuteSQL(VAL_SQL_HAS_TAGVALUE,elt.ElementID&"|"&tagName&"|"&valueList)
	if result is nothing then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckHasTagValueIn"),elt,empty
	elseif result.count = 0  then
		PublishResult severity,EAST.StrRep(msg,valueList),elt,empty
	end if
end sub

sub CheckWFExtendsSameLevelWF(elt,severity,msg)
	dim eltWFType: eltWFType = GetTagValByName(elt.taggedValues,"WorkflowType")
	dim result: result = EAST.ExecuteScalarSQL( _
		VAL_SQL_WF_EXTENDS_OTHERLEVEL,elt.ElementID&"|"&eltWFType)
	if TypeName(result) = "Empty"  then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckWFExtendsSameLevelWF"),elt,empty
	elseif result > 0  then
		PublishResult severity,EAST.StrRep(msg,eltWFType),elt,empty
	end if
end sub

sub CheckWFStepNotInLowerWorkflow(elt,severity,msg)

	' Determine invalid flow types
	dim subflowType : subflowType = GetTagValByName(elt.TaggedValues,"WorkflowType")
	dim disAllowedTypes : disAllowedTypes = "'UseCase','WerkInstructie'"
	select case subflowType
		case "UseCase"
			disAllowedTypes = "'xxx'"
		case "WerkInstructie"
			disAllowedTypes = "'UseCase'"
	end select
	
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_WF_OFTYPE,elt.ElementID&"|"&disAllowedTypes)
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,EAST.StrRep(msg,subflowType&"|"&disAllowedTypes),elt,empty
	end if
end sub

sub CheckWFStepNotInComponent(elt,severity,msg)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_COMP,elt.ElementID)
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckClassifierInstanceIsOnWFDefDiagram(elt,severity,msg)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_CNT_CLASSIFIERINST_MISSING_ON_DD,elt.ElementID)
	if TypeName(result) = "Empty"  or CInt(result) > 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

sub CheckDiagramHasParent(dgm,validStereoList)
	dim result: result = EAST.ExecuteScalarSQL(VAL_SQL_PARENT_STEREOTYPE,dgm.DiagramID&"|"&validStereoList)
	if TypeName(result) = "Empty" then
		PublishResult 3,EAST.StrRep(VAL_PROGRAM_FAILURE,"CheckDiagramHasParent"),elt,dgm
	elseif result > 0 then
		PublishResult 3,EAST.StrRep(VAL_DGM_INVALID_PARENT,validStereoList),elt,dgm
	end if
end sub

sub CheckHasClassifier(elt,severity,msg)
	if elt.classifierID = 0  then
		PublishResult severity,msg,elt,empty
	end if
end sub

' Workflows included on a WF definition diagram should be included or extended by
' the parent workflow
sub CheckParentWorkflowIncludesOrExtendsOthers(severity,dgm)
	dim result, row, elt,i
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_INCLUDES_EXTENDS,dgm.DiagramID)
	if not result is nothing and result.count >0  then
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			PublishResult severity,EAST.StrRep(VAL_MISSING_INCLUDES_EXTENDS,elt.Name&"|"&row.Item("PARENTWORKFLOW")),elt,dgm
		next
	end if
end sub

' Composite actions are not allowed on a flowrealisation diagram of another composite activity or screen
' (composite activities are only allowed 1 level deep)
sub CheckCompositeIncludesNoComposite(severity,dgm)
	dim elt: set elt = GetElementByID(dgm.ParentID)
	if elt.Stereotype <> "TFCS_Workflow" then
		' Its a composite or screen
		dim result: set result = EAST.ExecuteSQL(VAL_SQL_COMP_ON_COMPDGM,dgm.DiagramID)
		if not result is nothing and result.count >0  then
			dim cmp: set cmp = GetElementByID(result.item(0).item("OBJECT_ID"))
			PublishResult severity,VAL_COMP_ON_COMPDGM,cmp,dgm
		end if
	end if
end sub

' =================================================================================================
' Synchronisations 
' =================================================================================================

' Ensure that all model elements explicitly related to a Workflow element are included 
' in its WF definition diagram 
sub SynchronizeWFDefWithModel(dgm)

	dim reload: reload = false 'will be set of something was added
	dim offset: offset = 0
	dim i,row,classifier
	Dim elt : 
	dim offA: offA = 0
	dim offWF: offWF = 0
	dim offREQ: offREQ = 0
	dim offISS: offISS = 0
	
	dim result
	Dim diagramObject : 

	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_RELATIONS_FROM_WF,dgm.DiagramID)
	if not result is nothing and result.count >0  then
		reload = true
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			select case elt.Stereotype
				case "TFCS_Workflow"
					set diagramObject = addEltToDiagram (elt,dgm,800+offWF,300+offWF)
					offWF = offWF + 10
				case "TFCS_Actor"
					set diagramObject = addEltToDiagram (elt,dgm,800+offA,150+offA)
					offA = offA + 10
				case else
					if  elt.Type = "Requirement" then
						set diagramObject = addEltToDiagram (elt,dgm,800+offREQ,800+offREQ)
						offREQ = offREQ + 10
					else
						set diagramObject = addEltToDiagram (elt,dgm,800+offISS,1000+offISS)
						offISS = offISS + 10
					end if
			end select
			PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_RELATED_TO_WFDEFN,elt.Name),elt,dgm
		next
	end if
	
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_RELATIONS_TO_WF,dgm.DiagramID)
	if not result is nothing and result.count >0  then
		reload = true
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			select case elt.Stereotype
				case "TFCS_Actor"
					set diagramObject = addEltToDiagram (elt,dgm,800+offA,150+offA)
					offA = offA + 10
				case else
					if  elt.Type = "Requirement" then
						set diagramObject = addEltToDiagram (elt,dgm,800+offREQ,800+offREQ)
						offREQ = offREQ + 10
					else
						set diagramObject = addEltToDiagram (elt,dgm,800+offISS,1000+offISS)
						offISS = offISS + 10
					end if
			end select
			PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_RELATED_TO_WFDEFN,elt.Name),elt,dgm
		next
	end if
	
	if(reload)then
		'Something was added => reload
		ReloadDiagram(dgm.DiagramID)
	end if

end sub

' Relative offsets for placing new elements on a WF definition diagram
dim offAI: offAI = 0
dim offDO: offDO = 0
dim offREQ: offREQ = 0
dim offISS: offISS = 0
dim offWF: offWF = 0
	
' Add all elements used in the flow, or any of its subflows, that are missing in its flow definition diagram 
sub SynchronizeWFDefWithFlow(dgm)

	dim wf: set wf = GetElementByID(dgm.ParentID)
	if wf.Stereotype = "TFCS_Workflow" then
		' It is flow realisation for a workflow
		Dim wfActivity : 
		set wfActivity = GetElementByID(wf.ParentID)
		dim defDgm: set defDgm = wfActivity.CompositeDiagram

		offAI = 0
		offDO = 0
		offREQ = 0
		offISS = 0
		offWF = 0

		if(DoSynchronizeWFDefWithFlow(dgm,defDgm) = true) then
			'Something was added => reload
			ReloadDiagram(defDgm.DiagramID)
		end if
	end if
end sub


function DoSynchronizeWFDefWithFlow(dgm,defDgm)
	DoSynchronizeWFDefWithFlow = false 'no elements added => no refresh needed
	
	dim i,row,elt,eltInst,conn,wf
	dim result
	Dim diagramObject : 
	
	' Add all Authorisationitems that have effects on the flow but have not been included in the WF definition diagram
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_CLASSIFIERS_ON_WFDEFN,dgm.DiagramID&"|"&defDgm.DiagramID&"|'TFCS_Authorisation'")
	if not result is nothing and result.count >0  then
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			select case elt.Stereotype
				case "TFCS_Authorisation"
					set diagramObject = addEltToDiagram (elt,defDgm,800+offAI,600+offAI)
					PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_AI_TO_WFDEFN,elt.name),elt,defDgm
					offAI = offAI + 10
				case else
			end select
		next
		DoSynchronizeWFDefWithFlow = true
	end if

	' Add an instance for each domainobject included (as instance) in the flow but not on the WF definition diagram
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_INST_ON_WFDEFN,dgm.DiagramID&"|"&defDgm.DiagramID&"|'TFCS_DomainObject'")
	if not result is nothing and result.count >0  then
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			select case elt.Stereotype
				case "TFCS_DomainObject"
					set eltInst= GetElementByID(defDgm.ParentID).Elements.AddNew("","TFCS::TFCS_DomainInstance")
					eltInst.ClassifierID = elt.ElementID
					eltInst.ClassifierName = elt.Name
					eltInst.Update()
					set diagramObject = addEltToDiagram (eltInst,defDgm,800+offDO,400+offDO)
					PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_DO_TO_WFDEFN,elt.name),elt,defDgm
					offDO = offDO + 10
				case else
			end select
		next
		DoSynchronizeWFDefWithFlow = true
	end if

	' Add all subflows that have not been included in the WF definition diagram
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_WORKFLOWS_ON_WFDEFN,dgm.DiagramID&"|"&defDgm.DiagramID)
	if not result is nothing and result.count >0  then
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			
			' If an include relation does not yet exist, create it now
			' set wf = GetElementByID(result.item(0).item("WF_ID"))
'			if not RelationExists(wf.ElementID,"'UseCase'","'Includes'",elt.ElementID) then
'				set conn = wf.Connectors.AddNew("", "UseCase")
'				conn.SupplierID = elt.ElementID
'				conn.SubType="Includes"
'				conn.alias="<<includes>>"
'				conn.Update()
'			end if
			set diagramObject = addEltToDiagram (elt,defDgm,800+offWF,300+offWF)
			PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_WF_TO_WFDEFN,elt.name),elt,defDgm
			offWF = offWF + 10
		next
		DoSynchronizeWFDefWithFlow = true
	end if
	
	' Add all remaining elements included in the flow but not in the WF definition diagram
	set result = EAST.ExecuteSQL(VAL_SQL_GET_MISSING_ELTS_ON_WFDEFN,dgm.DiagramID&"|"&defDgm.DiagramID& _
		"|'TFCS_Legislation','TFCS_Requirement','TFCS_NFR'," + _
		"'TFCS_Request','TFCS_ReviewComment','TFCS_Ambiguity','TFCS_TBD','TFCS_Issue'")
	if not result is nothing and result.count >0  then
		for i = 0 to result.count - 1
			set row = result.item(i)
			set elt = GetElementByID(row.Item("OBJECT_ID"))
			select case elt.Type
				case "Requirement"
					set diagramObject = addEltToDiagram (elt,defDgm,800+offREQ,800+offREQ)
					PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_REQ_TO_WFDEFN,elt.name),elt,defDgm
					offREQ = offREQ + 10
				case else
					set diagramObject = addEltToDiagram (elt,defDgm,800+offISS,1000+offISS)
					PublishResult 2,EAST.StrRep(VAL_INFO_ADDED_ELT_TO_WFDEFN,elt.Name),elt,defDgm
					offISS = offISS + 10
			end select
		next
		DoSynchronizeWFDefWithFlow = true
	end if
	
	' Recursively check subflows
	EAST.LogInfo("Recursively checking component & screen diagrams... ")
	dim subComps: Set subComps =  EAST.ExecuteSQL(GEN_SQL_DGM_COMPLEXSTEPS,dgm.DiagramGUID)
	if not subComps is nothing then
		dim subComp
		Dim compDgm : 
		for each subComp in subComps.Items
			set compDgm = GetDiagramByID(subComp.item("DIAGRAM_ID"))
			if DoSynchronizeWFDefWithFlow(compDgm,defDgm) then
				DoSynchronizeWFDefWithFlow = true
			end if
		next
	end if
end function


' =================================================================================================
' Reporting interface
' =================================================================================================

'WARNING LEVELS
'mvError 						= 0
'mvWarning 						= 1
'mvInformation 					= 2
'mvErrorCritical 				= 3 
sub PublishResult(severity,msg,elt,dgm)
	EAST.PublishValidationResult severity,msg,elt,dgm
end sub
